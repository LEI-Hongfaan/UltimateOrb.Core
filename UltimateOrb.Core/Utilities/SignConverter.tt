using System;
using System.Diagnostics.Contracts;
using System.Runtime;
using System.Runtime.CompilerServices;
using System.Runtime.ConstrainedExecution;
<#
var result_type_sign_s = new string[] { "", "u" };
var type_base_s = new string[] { "int", "long" };
var variable_type_sign_s = new string[] { "", "u" };
var check_s = new string[] { "", "un" };
#>

namespace UltimateOrb.Utilities {

    [DiscardableAttribute()]
#if INDEPENDENT_XINTN_LIBRARY
    internal
#else
    public
#endif
        static partial class SignConverter {
<#
for (var i = 0; i < 16; ++i) {
    var result_type_sign = result_type_sign_s[0 == (i & (1 << 0)) ? 0 : 1];
	var type_base = type_base_s[0 == (i & (1 << 1)) ? 0 : 1];
	var variable_type_sign = variable_type_sign_s[0 == (i & (1 << 2)) ? 0 : 1];
	var check = check_s[0 == (i & (1 << 3)) ? 0 : 1];
#>

<#
	if ("" != result_type_sign || "" != variable_type_sign) {
#>
        [CLSCompliantAttribute(false)]
<#
	}
#>
        // [ReliabilityContractAttribute(Consistency.WillNotCorruptState, Cer.Success)]
        [TargetedPatchingOptOutAttribute("")]
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        [PureAttribute()]
        public static <#= result_type_sign #><#= type_base #> To<#= "" == result_type_sign ? "S" : "Uns" #>igned<#= "" == check ? "C" : "Unc" #>hecked(this <#= variable_type_sign #><#= type_base #> value) {
            return <#= check #>checked((<#= result_type_sign #><#= type_base #>)value);
        }
<#
}
#>
    }
}
