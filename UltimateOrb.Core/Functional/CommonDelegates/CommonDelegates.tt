// ==++==
//
//   Copyright (c) LEI Hongfaan.  All rights reserved.  Licensed under the MIT License.
//
// ==--==
// ==++==
//
//   MIT License
//
//   Copyright (c) 2019 LEI Hongfaan
//
//   Permission is hereby granted, free of charge, to any person obtaining a copy
//   of this software and associated documentation files (the "Software"), to deal
//   in the Software without restriction, including without limitation the rights
//   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//   copies of the Software, and to permit persons to whom the Software is
//   furnished to do so, subject to the following conditions:
//
//   The above copyright notice and this permission notice shall be included in all
//   copies or substantial portions of the Software.
//
//   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//   SOFTWARE.
//
// ==--==
<#
var payloads = new (string Name, string DelegateType, object Data)[] {
  ("CreateInstance", @"Func<T>", null),
  ("CreateBoxedInstance", @"Func<StrongBox<T>>" , null),
};
#>
//----------------------
// <auto-generated>
//     Generated using T4 Template.
// </auto-generated>
//----------------------
#nullable enable
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
<#
foreach(var payload in payloads) {
#>

namespace UltimateOrb.Functional.CommonDelegates {

    public static partial class <#= payload.Name #> {

        public static LambdaExpression GetExpression(Type? type) {
            if (type == null) {
                throw new ArgumentNullException(nameof(type));
            }
            return GetExpressionInternal(type);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static <#= payload.DelegateType #> GetValue<T>() {
            return GetValueInternal<T>();
        }

        public static Delegate GetValue(Type? type) {
            if (type == null) {
                throw new ArgumentNullException(nameof(type));
            }
            return GetValueInternal(type);
        }

        internal static LambdaExpression GetExpressionInternal(Type type) {
            // TODO: Cache the results.
            return GetExpressionInternalCore(type);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static <#= payload.DelegateType #> GetValueInternal<T>() {
            return PerType<T>.Value;
        }

        internal static Delegate GetValueInternal(Type type) {
            return (typeof(PerType<>).MakeGenericType(type).GetField(nameof(PerType<VoidResult>.Value)).GetValue(null) as Delegate)!;
        }

        public static class PerType<T> {
            
			public static readonly <#= payload.DelegateType #> Value = GetValueCore();

            [MethodImpl(MethodImplOptions.NoInlining)]
            private static <#= payload.DelegateType #> GetValueCore() {
                return (GetValueInternalCore(typeof(T)) as <#= payload.DelegateType #>)!;
            }
        }
    }
}
<#
}
#>
