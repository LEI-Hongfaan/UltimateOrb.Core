using System;
using static UltimateOrb.Utilities.BooleanIntegerModule;
using static UltimateOrb.Utilities.Extensions.BooleanIntegerExtensions;
<#
var Ti_s = new int[] { 32, 64, 64 };
var TNS = new string[] { "", "System.", "UltimateOrb." };
for (var j = 0; j < Ti_s.Length; ++j) {

var TN = TNS[j];
var Ti = Ti_s[j];
var Di = checked(Ti * 2);
var Si = checked((Ti + 1) / 2);

var T = checked(Ti * 2);
var LS = new string[] { "U", "U", "", "" };
var HS = new string[] { "U", "", "U", "" };
var CS = new string[] { "false", "false", "false", "true" };

for (var i = 0; i < LS.Length; ++i) {
	var L = LS[i];
	var H = HS[i];
	var C = CS[i];
#>

namespace UltimateOrb.Numerics {
	using UInt = UInt<#= Ti #>;
	using ULong = <#= TN #>UInt<#= Di #>;
	using Int = Int<#= Ti #>;
	using Long = <#= TN #>Int<#= Di #>;

	using Math = global::Internal.System.Math;

	using IntT = <#= TN #>Int<#= T #>;
	using UIntT = <#= TN #>UInt<#= T #>;
	
	using LIntT = <#= TN #><#= L #>Int<#= T #>;
	using HIntT = <#= TN #><#= H #>Int<#= T #>;

	public static partial class DoubleArithmetic {

		[System.CLSCompliantAttribute(<#= C #>)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static LIntT IncreaseUnchecked(LIntT value_lo, HIntT value_hi, out HIntT result_hi) {
			var result_lo_ = value_lo;
			unchecked {
				++result_lo_;
			}
			var result_hi_ = unchecked((HIntT)value_hi);
			unchecked {
				result_hi_ += unchecked((HIntT)(~(LIntT)0 == value_lo).AsIntegerUnsafe());
			}
			result_hi = unchecked((HIntT)result_hi_);
			return result_lo_;
		}

		[System.CLSCompliantAttribute(<#= C #>)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static LIntT IncreaseSigned(LIntT value_lo, HIntT value_hi, out HIntT result_hi) {
			var result_lo_ = value_lo;
			unchecked {
				++result_lo_;
			}
			var result_hi_ = unchecked((IntT)value_hi);
			checked {
				result_hi_ += unchecked((IntT)(~(LIntT)0 == value_lo).AsIntegerUnsafe());
			}
			result_hi = unchecked((HIntT)result_hi_);
			return result_lo_;
		}

		[System.CLSCompliantAttribute(<#= C #>)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static LIntT IncreaseUnsigned(LIntT value_lo, HIntT value_hi, out HIntT result_hi) {
			var result_lo_ = value_lo;
			unchecked {
				++result_lo_;
			}
			var result_hi_ = unchecked((UIntT)value_hi);
			checked {
				result_hi_ += unchecked((UIntT)(~(LIntT)0 == value_lo).AsIntegerUnsafe());
			}
			result_hi = unchecked((HIntT)result_hi_);
			return result_lo_;
		}

		[System.CLSCompliantAttribute(<#= C #>)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static LIntT DecreaseUnchecked(LIntT value_lo, HIntT value_hi, out HIntT result_hi) {
			var result_lo_ = value_lo;
			unchecked {
				--result_lo_;
			}
			var result_hi_ = unchecked((HIntT)value_hi);
			unchecked {
				result_hi_ -= unchecked((HIntT)((LIntT)0 == value_lo).AsIntegerUnsafe());
			}
			result_hi = unchecked((HIntT)result_hi_);
			return result_lo_;
		}

		[System.CLSCompliantAttribute(<#= C #>)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static LIntT DecreaseSigned(LIntT value_lo, HIntT value_hi, out HIntT result_hi) {
			var result_lo_ = value_lo;
			unchecked {
				--result_lo_;
			}
			var result_hi_ = unchecked((IntT)value_hi);
			checked {
				result_hi_ -= unchecked((IntT)((LIntT)0 == value_lo).AsIntegerUnsafe());
			}
			result_hi = unchecked((HIntT)result_hi_);
			return result_lo_;
		}

		[System.CLSCompliantAttribute(<#= C #>)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static LIntT DecreaseUnsigned(LIntT value_lo, HIntT value_hi, out HIntT result_hi) {
			var result_lo_ = value_lo;
			unchecked {
				--result_lo_;
			}
			var result_hi_ = unchecked((UIntT)value_hi);
			checked {
				result_hi_ -= unchecked((UIntT)((LIntT)0 == value_lo).AsIntegerUnsafe());
			}
			result_hi = unchecked((HIntT)result_hi_);
			return result_lo_;
		}
	}
}
<#
}
#>

namespace UltimateOrb.Numerics {
	using UInt = UInt<#= Ti #>;
	using ULong = <#= TN #>UInt<#= Di #>;
	using Int = Int<#= Ti #>;
	using Long = <#= TN #>Int<#= Di #>;

	using Math = global::Internal.System.Math;

	using IntT = <#= TN #>Int<#= T #>;
	using UIntT = <#= TN #>UInt<#= T #>;

	public static partial class DoubleArithmetic {

		[System.CLSCompliantAttribute(false)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static UIntT Increase(UIntT value_lo, UIntT value_hi, out UIntT result_hi) {
			return IncreaseUnsigned(value_lo, value_hi, out result_hi);
		}

		[System.CLSCompliantAttribute(false)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static UIntT Increase(UIntT value_lo, IntT value_hi, out IntT result_hi) {
			return IncreaseSigned(value_lo, value_hi, out result_hi);
		}

		[System.CLSCompliantAttribute(false)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static UIntT Decrease(UIntT value_lo, UIntT value_hi, out UIntT result_hi) {
			return DecreaseUnsigned(value_lo, value_hi, out result_hi);
		}

		[System.CLSCompliantAttribute(false)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static UIntT Decrease(UIntT value_lo, IntT value_hi, out IntT result_hi) {
			return DecreaseSigned(value_lo, value_hi, out result_hi);
		}
	}
}
<#
}
#>

namespace UltimateOrb.Numerics {

    public static partial class DoubleArithmetic<IntT, UIntT>
        where IntT : struct, System.Numerics.IBinaryInteger<IntT>, System.Numerics.ISignedNumber<IntT>
        where UIntT : struct, System.Numerics.IBinaryInteger<UIntT>, System.Numerics.IUnsignedNumber<UIntT> {

        [System.CLSCompliantAttribute(true)]
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static UIntT IncreaseUnchecked(UIntT value_lo, UIntT value_hi, out UIntT result_hi) {
            var result_lo_ = value_lo;
            unchecked {
                ++result_lo_;
            }
            var result_hi_ = value_hi;
            unchecked {
                result_hi_ += UIntT.AllBitsSet == value_lo ? UIntT.One : UIntT.Zero;
            }
            result_hi = result_hi_;
            return result_lo_;
        }

        [System.CLSCompliantAttribute(true)]
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static UIntT IncreaseSigned(UIntT value_lo, IntT value_hi, out IntT result_hi) {
            var result_lo_ = value_lo;
            unchecked {
                ++result_lo_;
            }
            var result_hi_ = value_hi;
            if (UIntT.AllBitsSet == value_lo) {
                checked {
                    ++result_hi_;
                }
            }
            result_hi = result_hi_;
            return result_lo_;
        }

        [System.CLSCompliantAttribute(true)]
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static UIntT IncreaseUnsigned(UIntT value_lo, UIntT value_hi, out UIntT result_hi) {
            var result_lo_ = value_lo;
            unchecked {
                ++result_lo_;
            }
            var result_hi_ = value_hi;
            if (UIntT.AllBitsSet == value_lo) {
                checked {
                    ++result_hi_;
                }
            }
            result_hi = result_hi_;
            return result_lo_;
        }

        [System.CLSCompliantAttribute(true)]
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static UIntT DecreaseUnchecked(UIntT value_lo, UIntT value_hi, out UIntT result_hi) {
            var result_lo_ = value_lo;
            unchecked {
                --result_lo_;
            }
            var result_hi_ = value_hi;
            unchecked {
                result_hi_ -= UIntT.Zero == value_lo ? UIntT.One : UIntT.Zero;
            }
            result_hi = result_hi_;
            return result_lo_;
        }

        [System.CLSCompliantAttribute(true)]
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static UIntT DecreaseSigned(UIntT value_lo, IntT value_hi, out IntT result_hi) {
            var result_lo_ = value_lo;
            unchecked {
                --result_lo_;
            }
            var result_hi_ = value_hi;
            if (UIntT.Zero == value_lo) {
                checked {
                    --result_hi_;
                }
            }
            result_hi = result_hi_;
            return result_lo_;
        }

        [System.CLSCompliantAttribute(true)]
        [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static UIntT DecreaseUnsigned(UIntT value_lo, UIntT value_hi, out UIntT result_hi) {
            var result_lo_ = value_lo;
            unchecked {
                --result_lo_;
            }
            var result_hi_ = value_hi;
            if (UIntT.Zero == value_lo) {
                checked {
                    --result_hi_;
                }
            }
            result_hi = result_hi_;
            return result_lo_;
        }
    }
}
