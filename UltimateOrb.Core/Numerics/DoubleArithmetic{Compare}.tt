using System;
<#
var Ti_s = new int[] { 32, 64, 64 };
var TNS = new string[] { "", "System.", "UltimateOrb." };
for (var j = 0; j < Ti_s.Length; ++j) {

var TN = TNS[j];
var Ti = Ti_s[j];
var Di = checked(Ti * 2);
var Si = checked((Ti + 1) / 2);

var T = checked(Ti * 2);
var LS = new string[] { "U", "U" };
var HS = new string[] { "U", "" };
var CS = new string[] { "false", "false" };

for (var i = 0; i < LS.Length; ++i) {
	var L = LS[i];
	var H = HS[i];
	var C = CS[i];
#>

namespace UltimateOrb.Numerics {
	using UInt = UInt<#= Ti #>;
	using ULong = <#= TN #>UInt<#= Di #>;
	using Int = Int<#= Ti #>;
	using Long = <#= TN #>Int<#= Di #>;

	using Math = global::Internal.System.Math;

	using IntT = <#= TN #>Int<#= T #>;
	using UIntT = <#= TN #>UInt<#= T #>;
	
	using LIntT = <#= TN #><#= L #>Int<#= T #>;
	using HIntT = <#= TN #><#= H #>Int<#= T #>;

	public static partial class DoubleArithmetic {
		
		[System.CLSCompliantAttribute(false)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static bool Equals(LIntT first_lo, HIntT first_hi, LIntT second_lo, HIntT second_hi) {
			return first_lo == second_lo && first_hi == second_hi;
		}

		[System.CLSCompliantAttribute(false)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static bool NotEqual(LIntT first_lo, HIntT first_hi, LIntT second_lo, HIntT second_hi) {
			return first_lo != second_lo || first_hi != second_hi;
		}

		[System.CLSCompliantAttribute(false)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static bool LessThan(LIntT first_lo, HIntT first_hi, LIntT second_lo, HIntT second_hi) {
			return first_hi < second_hi || (first_hi == second_hi && first_lo < second_lo);
		}

		[System.CLSCompliantAttribute(false)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static bool LessThanOrEqual(LIntT first_lo, HIntT first_hi, LIntT second_lo, HIntT second_hi) {
			return first_hi <= second_hi && (first_hi != second_hi || first_lo <= second_lo);
		}

		[System.CLSCompliantAttribute(false)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static bool GreaterThan(LIntT first_lo, HIntT first_hi, LIntT second_lo, HIntT second_hi) {
			return first_hi > second_hi || (first_hi == second_hi && first_lo > second_lo);
		}

		[System.CLSCompliantAttribute(false)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static bool GreaterThanOrEqual(LIntT first_lo, HIntT first_hi, LIntT second_lo, HIntT second_hi) {
			return first_hi >= second_hi && (first_hi != second_hi || first_lo >= second_lo);
		}

		[System.CLSCompliantAttribute(false)]
		[System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
		public static int Compare(LIntT first_lo, HIntT first_hi, LIntT second_lo, HIntT second_hi) {
			if (first_hi < second_hi) return -1;
			if (first_hi > second_hi) return 1;
			if (first_lo < second_lo) return -1;
			if (first_lo > second_lo) return 1;
			return 0;
		}
	}
}
<#
}
}
#>
