<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UltimateOrb.Core</name>
    </assembly>
    <members>
        <member name="T:UltimateOrb.Array_Empty`1">
            <summary>
                <para>Provides an empty array of the specified type.</para>
            </summary>
            <typeparam name="T">
                <para>The element type of the array.</para>
            </typeparam>
        </member>
        <member name="F:UltimateOrb.Array_Empty`1.Value">
            <summary>
                <para>
                    Represents the empty array.
                    This field is read-only.
                </para>
            </summary>
        </member>
        <member name="T:UltimateOrb.Boolean8">
            <summary>
            <para>
            Represents a Boolean (true or false) value. Internally, this type uses 8-bit representations.
            </para>
            <para>
            This type can handle non-canonical representations (values other than 0 or 1).<br />
            </para>
            </summary>
            <remarks>
            This type is blittable.<br />
            The size of a value of this type is the same as sizeof(byte).
            </remarks>
        </member>
        <member name="T:UltimateOrb.Boolean32">
            <summary>
            <para>
            Represents a Boolean (true or false) value. Internally, this type uses an integer (<c><see cref="T:System.Int32" /></c>/<c><see cref="T:System.UInt32" /></c>).
            </para>
            <para>
            This type can handle non-canonical representations (values other than 0 or 1).<br />
            See <see cref="T:UltimateOrb.CanonicalIntegerBoolean" /> for a boolean type that handles canonical representations only but may have better performance.
            </para>
            </summary>
            <remarks>
            This type is blittable.<br />
            The size of a value of this type is the same as sizeof(int).
            </remarks>
        </member>
        <member name="T:UltimateOrb.CanonicalIntegerBoolean">
            <summary>
            <para>
            Represents a Boolean (true or false) value. Internally, this type uses an integer (<c><see cref="T:System.Int32" /></c>/<c><see cref="T:System.UInt32" /></c>).
            </para>
            <para>
            The internal representation of this boolean type is assumed to be canonical (0 for false and 1 for true) and remains so. Breaking this invariant may cause undefined behavior.<br />
            See <see cref="!:Bool" /> for a boolean type that handles non-canonical representations.
            </para>
            </summary>
            <remarks>
            This type is blittable.<br />
            The size of a value of this type is the same as sizeof(int).
            </remarks>
        </member>
        <member name="P:UltimateOrb.CanonicalIntegerBoolean.StandardValue">
            <summary>
            A standard <see cref="T:System.Boolean"/> value to represent the current <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>.
            </summary>
        </member>
        <member name="P:UltimateOrb.CanonicalIntegerBoolean.IntegerValue">
            <summary>
            The internal representation of the current <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>.
            </summary>
        </member>
        <member name="F:UltimateOrb.CanonicalIntegerBoolean.TrueString">
            <summary>
            Represents the <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:UltimateOrb.CanonicalIntegerBoolean.FalseString">
            <summary>
            Represents the <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_Explicit(UltimateOrb.CanonicalIntegerBoolean)~System.Int32">
            <summary>
            Retrieves the internal representation of the <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value.
            </summary>
            <param name="value">The value to retrieve internal representation.</param>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_Explicit(System.Int32)~UltimateOrb.CanonicalIntegerBoolean">
            <summary>
            <para>
            Converts the value of the specified integer to a <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value.
            </para>
            <para>
            <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the integer is 0; otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.
            </para>
            </summary>
            <param name="value">The specified integer.</param>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_Explicit(UltimateOrb.CanonicalIntegerBoolean)~System.UInt32">
            <summary>
            Retrive the internal representation of the <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_Explicit(System.UInt32)~UltimateOrb.CanonicalIntegerBoolean">
            <summary>
            <para>
            Converts the value of the specified integer to a <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value.
            </para>
            <para>
            <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the integer is 0; otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.
            </para>
            </summary>
            <param name="value">The specified integer.</param>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_Implicit(UltimateOrb.CanonicalIntegerBoolean)~System.Boolean">
            <summary>
            <para>
            Converts the <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value to a standard <see cref="T:System.Boolean"/> value.
            </para>
            <para>
            No checks will be performed in release mode.
            </para>
            </summary>
            <param name="value">The specified integer.</param>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_Implicit(System.Boolean)~UltimateOrb.CanonicalIntegerBoolean">
            <summary>
            <para>
            Converts the standard <see cref="T:System.Boolean"/> value to a <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value .
            </para>
            <para>
            This operation is safe on non-canonical inputs.
            </para>
            </summary>
            <param name="value">The specified integer.</param>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_LogicalNot(UltimateOrb.CanonicalIntegerBoolean)">
            <summary>
            Computes the logical negation (NOT) of the <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_BitwiseAnd(UltimateOrb.CanonicalIntegerBoolean,UltimateOrb.CanonicalIntegerBoolean)">
            <summary>
            Computes the logical conjunction (AND) of the <paramref name="first"/> and <paramref name="second"/> values.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_BitwiseOr(UltimateOrb.CanonicalIntegerBoolean,UltimateOrb.CanonicalIntegerBoolean)">
            <summary>
            Computes the logical disjunction (OR) of the <paramref name="first"/> and <paramref name="second"/> values.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_ExclusiveOr(UltimateOrb.CanonicalIntegerBoolean,UltimateOrb.CanonicalIntegerBoolean)">
            <summary>
            Computes the logical exclusive disjunction (XOR) of the <paramref name="first"/> and <paramref name="second"/> values.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_True(UltimateOrb.CanonicalIntegerBoolean)">
            <summary>
            Determines whether the <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value is true.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_False(UltimateOrb.CanonicalIntegerBoolean)">
            <summary>
            Determines whether the <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value is false.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.ToString">
            <summary>
            Converts the current <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value to a <see cref="T:System.String"/> representation.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.GetTypeCode">
            <summary>
            Gets the <see cref="T:System.TypeCode"/> of <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.ToString(System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.TryFormat(System.Span{System.Char},System.Int32@)">
            <summary>
            Formats the current <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.Equals(UltimateOrb.CanonicalIntegerBoolean)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.CompareTo(UltimateOrb.CanonicalIntegerBoolean)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.Parse(System.String)">
            <summary>
            Determines whether a String represents true or false.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Determines whether a String represents true or false.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.TryParse(System.String,UltimateOrb.CanonicalIntegerBoolean@)">
            <summary>
            Determines whether a String represents true or false.
            </summary>
        </member>
        <member name="F:UltimateOrb.CanonicalIntegerBoolean.TrueValue">
            <summary>
            Represents internal integer value of <see cref="P:UltimateOrb.CanonicalIntegerBoolean.True"/>.
            </summary>
        </member>
        <member name="P:UltimateOrb.CanonicalIntegerBoolean.True">
            <summary>
            Represents <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c>.
            </summary>
        </member>
        <member name="F:UltimateOrb.CanonicalIntegerBoolean.FalseValue">
            <summary>
            Represents internal integer value of <see cref="P:UltimateOrb.CanonicalIntegerBoolean.False"/>.
            </summary>
        </member>
        <member name="P:UltimateOrb.CanonicalIntegerBoolean.False">
            <summary>
            Represents <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.TryParse(System.ReadOnlySpan{System.Char},UltimateOrb.CanonicalIntegerBoolean@)">
            <summary>
            Determines whether a String represents true or false.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_Equality(UltimateOrb.CanonicalIntegerBoolean,UltimateOrb.CanonicalIntegerBoolean)">
            <summary>
            Compares two <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> values.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBoolean.op_Inequality(UltimateOrb.CanonicalIntegerBoolean,UltimateOrb.CanonicalIntegerBoolean)">
            <summary>
            Compares two <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> values.
            </summary>
        </member>
        <member name="T:UltimateOrb.CanonicalIntegerBooleanModule">
            <summary>
            Provides helper functions related to <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>.
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.ToCanonicalIntegerBooleanUnsafe(System.Int32)">
            <summary>
            Converts an integer to a <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value. No checks will be performed in release mode.
            </summary>
            <param name="value">The integer to convert.</param>
            <returns>A <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value. The internal representation of the <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value is specified by the integer.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.ToCanonicalIntegerBooleanUnsafe(System.UInt32)">
            <summary>
            Converts an integer to a <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value. No checks will be performed in release mode.
            </summary>
            <param name="value">The integer to convert.</param>
            <returns>A <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value. The internal representation of the <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value is specified by the integer.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.ToCanonicalIntegerBooleanUnsafe(System.Boolean)">
            <summary>
            Converts a <see cref="T:System.Boolean"/> to a <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value. No checks will be performed in release mode.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> to convert.</param>
            <returns>A <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value. The internal representation of the <see cref="T:UltimateOrb.CanonicalIntegerBoolean"/> value is specified by the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.IsMinusOne(System.Int32)">
            <summary>
            Compares <paramref name="value"/> to -1 (bitwise complement of 0).
            </summary>
            <param name="value">The value to compare.</param>
            <returns><c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the value is equal to -1 (bitwise complement of 0); otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.IsMinusOne(System.UInt32)">
            <summary>
            Compares <paramref name="value"/> to -1 (bitwise complement of 0).
            </summary>
            <param name="value">The value to compare.</param>
            <returns><c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the value is equal to -1 (bitwise complement of 0); otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.IsMinusOne(System.Int64)">
            <summary>
            Compares <paramref name="value"/> to -1 (bitwise complement of 0).
            </summary>
            <param name="value">The value to compare.</param>
            <returns><c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the value is equal to -1 (bitwise complement of 0); otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.IsMinusOne(System.UInt64)">
            <summary>
            Compares <paramref name="value"/> to -1 (bitwise complement of 0).
            </summary>
            <param name="value">The value to compare.</param>
            <returns><c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the value is equal to -1 (bitwise complement of 0); otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.IsMinusOne(System.IntPtr)">
            <summary>
            Compares <paramref name="value"/> to -1 (bitwise complement of 0).
            </summary>
            <param name="value">The value to compare.</param>
            <returns><c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the value is equal to -1 (bitwise complement of 0); otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.IsMinusOne(System.UIntPtr)">
            <summary>
            Compares <paramref name="value"/> to -1 (bitwise complement of 0).
            </summary>
            <param name="value">The value to compare.</param>
            <returns><c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the value is equal to -1 (bitwise complement of 0); otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.IsZero(System.Int32)">
            <summary>
            Compares <paramref name="value"/> to -1 (bitwise complement of 0).
            </summary>
            <param name="value">The value to compare.</param>
            <returns><c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the value is equal to -1 (bitwise complement of 0); otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.IsZero(System.UInt32)">
            <summary>
            Compares <paramref name="value"/> to -1 (bitwise complement of 0).
            </summary>
            <param name="value">The value to compare.</param>
            <returns><c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the value is equal to -1 (bitwise complement of 0); otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.IsZero(System.Int64)">
            <summary>
            Compares <paramref name="value"/> to -1 (bitwise complement of 0).
            </summary>
            <param name="value">The value to compare.</param>
            <returns><c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the value is equal to -1 (bitwise complement of 0); otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.IsZero(System.UInt64)">
            <summary>
            Compares <paramref name="value"/> to -1 (bitwise complement of 0).
            </summary>
            <param name="value">The value to compare.</param>
            <returns><c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the value is equal to -1 (bitwise complement of 0); otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.IsZero(System.IntPtr)">
            <summary>
            Compares <paramref name="value"/> to -1 (bitwise complement of 0).
            </summary>
            <param name="value">The value to compare.</param>
            <returns><c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the value is equal to -1 (bitwise complement of 0); otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.IsZero(System.UIntPtr)">
            <summary>
            Compares <paramref name="value"/> to -1 (bitwise complement of 0).
            </summary>
            <param name="value">The value to compare.</param>
            <returns><c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if the value is equal to -1 (bitwise complement of 0); otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.</returns>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.Equals(System.UInt32,System.UInt32)">
            <summary>
                <para>
                    Returns <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.Equals(System.Int32,System.Int32)">
            <summary>
                <para>
                    Returns <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.Equals(System.UInt64,System.UInt64)">
            <summary>
                <para>
                    Returns <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.Equals(System.Int64,System.Int64)">
            <summary>
                <para>
                    Returns <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.Equals(System.Single,System.Single)">
            <summary>
                <para>
                    Returns <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.Equals(System.Double,System.Double)">
            <summary>
                <para>
                    Returns <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.Equals(System.UIntPtr,System.UIntPtr)">
            <summary>
                <para>
                    Returns <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.CanonicalIntegerBooleanModule.Equals(System.IntPtr,System.IntPtr)">
            <summary>
                <para>
                    Returns <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)true</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>(<see cref="T:UltimateOrb.CanonicalIntegerBoolean"/>)false</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="T:UltimateOrb.Collections.Generic.ReferenceTypes.LinkedTree`1.PreorderNodeModifiableEnumerator">
            <summary>
            modifiable:
            any fields of current node and/or previous nodes - or -
            any fields those refer to current node and/or previous nodes
            </summary>
        </member>
        <member name="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1">
            <summary>
                <para>Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type. This type is a value type.</para>
            </summary>
            <typeparam name="T">
                <para>Specifies the type of elements in the stack.</para>
            </typeparam>
            <remarks>
                <para>Value assignments of the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/> have move semantics.</para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Collections.Plain.ValueTypes.Stack`1.#ctor(System.Int32)">
            <summary>
                <para>Initializes a new instance of the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/> type that is empty and has an initial capacity at least the value specified.</para>
            </summary>
            <param name="capacity">
                <para>The initial number of elements that the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/> can contain.</para>
            </param>
            <exception cref="T:System.OutOfMemoryException">
                <para>There is insufficient memory to satisfy the request.</para>
            </exception>
        </member>
        <member name="P:UltimateOrb.Collections.Plain.ValueTypes.Stack`1.Count">
            <summary>
                <para>Gets the number of elements contained in the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/>.</para>
            </summary>
            <returns>
                <para>The number of elements contained in the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/>.</para>
            </returns>
            <exception cref="T:System.OverflowException">
                <para>The result can not be represented in the result type.</para>
            </exception>
        </member>
        <member name="P:UltimateOrb.Collections.Plain.ValueTypes.Stack`1.LongCount">
            <summary>
                <para>Gets the number of elements contained in the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/>.</para>
            </summary>
            <returns>
                <para>The number of elements contained in the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/>.</para>
            </returns>
        </member>
        <member name="M:UltimateOrb.Collections.Plain.ValueTypes.Stack`1.Create">
            <summary>
                <para>Initializes a new instance of the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/> type that is empty and has the default initial capacity.</para>
            </summary>
            <exception cref="T:System.OutOfMemoryException">
                <para>There is insufficient memory to satisfy the request.</para>
            </exception>
        </member>
        <member name="M:UltimateOrb.Collections.Plain.ValueTypes.Stack`1.Create(System.Int32)">
            <summary>
                <para>Initializes a new instance of the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/> type that is empty and has an initial capacity at least the value specified.</para>
            </summary>
            <param name="capacity">
                <para>The initial number of elements that the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/> can contain.</para>
            </param>
            <exception cref="T:System.OutOfMemoryException">
                <para>There is insufficient memory to satisfy the request.</para>
            </exception>
            <remarks>
                <para>A dummy value is returned if <paramref name="capacity"/> is negative.</para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Collections.Plain.ValueTypes.Stack`1.IncreaseCapacity">
            <summary>
                <para>Increases the total number of elements the internal data structure can hold without resizing.</para>
            </summary>
            <exception cref="T:System.OverflowException">
                <para>The resulting number of elements contained in the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/> can not be represented in the internal data type. -or- There is insufficient memory to satisfy the request.</para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                <para>There is insufficient memory to satisfy the request.</para>
            </exception>
        </member>
        <member name="M:UltimateOrb.Collections.Plain.ValueTypes.Stack`1.Clear">
            <summary>
                <para>Removes all objects from the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/>.</para>
            </summary>
        </member>
        <member name="M:UltimateOrb.Collections.Plain.ValueTypes.Stack`1.Peek">
            <summary>
                <para>Returns the object at the top of the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/> without removing it.</para>
            </summary>
            <returns>
                <para>The object at the top of the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/>.</para>
            </returns>
        </member>
        <member name="M:UltimateOrb.Collections.Plain.ValueTypes.Stack`1.Pop">
            <summary>
                <para>Removes and returns the object at the top of the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/>.</para>
            </summary>
            <returns>
                <para>The object removed from the top of the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/>.</para>
            </returns>
            <remarks>
                <para>A dummy value is returned if the stack is empty. The value can be null for reference types.</para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Collections.Plain.ValueTypes.Stack`1.Push(`0)">
            <summary>
                <para>Inserts an object at the top of the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/>.</para>
            </summary>
            <param name="item">
                <para>The object to push onto the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/>. The value can be null for reference types.</para>
            </param>
            <exception cref="T:System.OverflowException">
                <para>The resulting number of elements contained in the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/> can not be represented in the internal data type. -or- There is insufficient memory to satisfy the request.</para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                <para>There is insufficient memory to satisfy the request.</para>
            </exception>
        </member>
        <member name="M:UltimateOrb.Collections.Plain.ValueTypes.Stack`1.Push">
            <summary>
                <para>Inserts a dummy value of type <typeparamref name="T"/> at the top of <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/>.</para>
            </summary>
            <returns>
                <para>A value of type ref <typeparamref name="T"/> (managed pointer to type <typeparamref name="T"/>) can be used to store the object being insert.</para>
            </returns>
            <exception cref="T:System.OverflowException">
                <para>The resulting number of elements contained in the <see cref="T:UltimateOrb.Collections.Plain.ValueTypes.Stack`1"/> can not be represented in the internal data type. -or- There is insufficient memory to satisfy the request.</para>
            </exception>
            <exception cref="T:System.OutOfMemoryException">
                <para>There is insufficient memory to satisfy the request.</para>
            </exception>
            <remarks>
                <para>Must store the object through the return value before any subsequent modification to the collection.</para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Collections.Plain.ValueTypes.Stack`1.SetCapacity(System.Int32)">
            <summary>
                <para>Sets the total number of elements the internal data structure can hold without resizing.</para>
            </summary>
            <param name="capacity">
                <para>The new capacity.</para>
            </param>
            <exception cref="T:System.OutOfMemoryException">
                <para>There is insufficient memory to satisfy the request.</para>
            </exception>
            <remarks>
                <para>Sets this instance to dummy value if <paramref name="capacity"/> is negative.</para>
            </remarks>
        </member>
        <member name="T:UltimateOrb.Collections.Specialized.BitArray32">
            <devdoc>
               <para>Provides a simple light bit vector with easy integer or Boolean access to
                  a 64 bit storage.</para>
            </devdoc>
        </member>
        <member name="M:UltimateOrb.Collections.Specialized.BitArray32.#ctor(System.Int32)">
            <devdoc>
            <para>Initializes a new instance of the BitArray64 structure with the specified internal data.</para>
            </devdoc>
        </member>
        <member name="M:UltimateOrb.Collections.Specialized.BitArray32.#ctor(UltimateOrb.Collections.Specialized.BitArray32)">
            <devdoc>
            <para>Initializes a new instance of the BitArray64 structure with the information in the specified
               value.</para>
            </devdoc>
        </member>
        <member name="P:UltimateOrb.Collections.Specialized.BitArray32.Item(System.Int32)">
            <devdoc>
               <para>Gets or sets a value indicating whether all the specified bits are set.</para>
            </devdoc>
        </member>
        <member name="P:UltimateOrb.Collections.Specialized.BitArray32.Data">
            <devdoc>
               returns the raw data stored in this bit vector...
            </devdoc>
        </member>
        <member name="T:UltimateOrb.Collections.Specialized.BitArray64">
            <devdoc>
               <para>Provides a simple light bit vector with easy integer or Boolean access to
                  a 64 bit storage.</para>
            </devdoc>
        </member>
        <member name="M:UltimateOrb.Collections.Specialized.BitArray64.#ctor(System.Int64)">
            <devdoc>
            <para>Initializes a new instance of the BitArray64 structure with the specified internal data.</para>
            </devdoc>
        </member>
        <member name="M:UltimateOrb.Collections.Specialized.BitArray64.#ctor(UltimateOrb.Collections.Specialized.BitArray64)">
            <devdoc>
            <para>Initializes a new instance of the BitArray64 structure with the information in the specified
               value.</para>
            </devdoc>
        </member>
        <member name="P:UltimateOrb.Collections.Specialized.BitArray64.Item(System.Int32)">
            <devdoc>
               <para>Gets or sets a value indicating whether all the specified bits are set.</para>
            </devdoc>
        </member>
        <member name="P:UltimateOrb.Collections.Specialized.BitArray64.Data">
            <devdoc>
               returns the raw data stored in this bit vector...
            </devdoc>
        </member>
        <member name="T:UltimateOrb.Default`1">
            <summary>
                <para>Provides the CLI default value of the specified type.</para>
            </summary>
            <typeparam name="T">
                <para>Specifies the type of the CLI default value.</para>
            </typeparam>
        </member>
        <member name="F:UltimateOrb.Default`1.Value">
            <summary>
                <para>Represents the CLI default value of type <typeparamref name="T"/>.</para>
            </summary>
        </member>
        <member name="T:UltimateOrb.Disposable">
            <summary>
            Supports <see cref="T:System.IDisposable"/> interface.
            </summary>
        </member>
        <member name="F:UltimateOrb.Disposable.Empty">
            <summary>
            An empty IDisposable will do nothing when disposing or finalizing.
            </summary>
        </member>
        <member name="T:UltimateOrb.AsyncDisposable">
            <summary>
            Supports <see cref="T:System.IDisposable"/> interface.
            </summary>
        </member>
        <member name="F:UltimateOrb.AsyncDisposable.Empty">
            <summary>
            An empty IDisposable will do nothing when disposing or finalizing.
            </summary>
        </member>
        <member name="T:UltimateOrb.Dummy`1">
            <summary>
                <para>Provides a dummy value of the specified type.</para>
            </summary>
            <typeparam name="T">
                <para>Specifies the type of the dummy value.</para>
            </typeparam>
        </member>
        <member name="F:UltimateOrb.Dummy`1.Value">
            <summary>
                <para>Represents a dummy value of type <typeparamref name="T"/>.</para>
            </summary>
        </member>
        <member name="T:UltimateOrb.Mathematics.NumberTheory.IsPrimeMillerRabinModule">
            <summary>
                <para>This API supports the product infrastructure and is not intended to be used directly from your code.</para>
                <seealso cref="T:UltimateOrb.Mathematics.NumberTheory.IsPrimeModule"/>
            </summary>
        </member>
        <member name="M:UltimateOrb.Mathematics.NumberTheory.IsPrimeMillerRabinModule.IsPrime(System.UInt64)">
            <summary>
                <para>This API supports the product infrastructure and is not intended to be used directly from your code.</para>
                <seealso cref="M:UltimateOrb.Mathematics.NumberTheory.IsPrimeModule.IsPrime(System.UInt64)"/>
            </summary>
        </member>
        <member name="M:UltimateOrb.Mathematics.NumberTheory.IsPrimeMillerRabinModule.IsPrime(System.UInt32)">
            <summary>
                <para>This API supports the product infrastructure and is not intended to be used directly from your code.</para>
                <seealso cref="M:UltimateOrb.Mathematics.NumberTheory.IsPrimeModule.IsPrime(System.UInt32)"/>
            </summary>
        </member>
        <member name="M:UltimateOrb.Mathematics.NumberTheory.IsPrimeMillerRabinModule.IsPrime(System.Int64)">
            <summary>
                <para>This API supports the product infrastructure and is not intended to be used directly from your code.</para>
                <seealso cref="M:UltimateOrb.Mathematics.NumberTheory.IsPrimeModule.IsPrime(System.Int64)"/>
            </summary>
        </member>
        <member name="M:UltimateOrb.Mathematics.NumberTheory.IsPrimeMillerRabinModule.IsPrime(System.Int32)">
            <summary>
                <para>This API supports the product infrastructure and is not intended to be used directly from your code.</para>
                <seealso cref="M:UltimateOrb.Mathematics.NumberTheory.IsPrimeModule.IsPrime(System.Int32)"/>
            </summary>
        </member>
        <member name="T:UltimateOrb.Mathematics.NumberTheory.IsPrimeModule">
            <summary>
                <para>Provides methods for primality tests.</para>
            </summary>
        </member>
        <member name="M:UltimateOrb.Mathematics.NumberTheory.IsPrimeModule.IsPrime(System.UInt64)">
            <summary>
                <para>Checks whether an input number is prime or not.</para>
            </summary>
            <param name="value">
                <para>The input number.</para>
            </param>
            <returns>
                <para>
                    <c lang="cs">true</c> if the input number is prime;
                    otherwise, <c lang="cs">false</c>.
                </para>
            </returns>
        </member>
        <member name="M:UltimateOrb.Mathematics.NumberTheory.IsPrimeModule.IsPrime(System.Int64)">
            <summary>
                <para>Checks whether an input number is prime or not.</para>
            </summary>
            <param name="value">
                <para>The input number.</para>
            </param>
            <returns>
                <para>
                    <c lang="cs">true</c> if the input number is prime;
                    otherwise, <c lang="cs">false</c>.
                </para>
            </returns>
        </member>
        <member name="M:UltimateOrb.Mathematics.NumberTheory.IsPrimeModule.IsPrime(System.UInt32)">
            <summary>
                <para>Checks whether an input number is prime or not.</para>
            </summary>
            <param name="value">
                <para>The input number.</para>
            </param>
            <returns>
                <para>
                    <c lang="cs">true</c> if the input number is prime;
                    otherwise, <c lang="cs">false</c>.
                </para>
            </returns>
        </member>
        <member name="M:UltimateOrb.Mathematics.NumberTheory.IsPrimeModule.IsPrime(System.Int32)">
            <summary>
                <para>Checks whether an input number is prime or not.</para>
            </summary>
            <param name="value">
                <para>The input number.</para>
            </param>
            <returns>
                <para>
                    <c lang="cs">true</c> if the input number is prime;
                    otherwise, <c lang="cs">false</c>.
                </para>
            </returns>
        </member>
        <member name="T:UltimateOrb.Mathematics.NumberTheory.ZZOverNZZModule">
            <summary>
                <para>Provides methods for modular arithmetic.</para>
            </summary>
        </member>
        <member name="M:UltimateOrb.Extensions.MemorySpanRuntimeHelpers.DangerousGetPinnedObjectDataSize(System.Object)">
            <summary>
            Gets the total instance field size (including padding) in bytes.
            </summary>
            <param name="obj">The pinned object.</param>
            <returns></returns>
        </member>
        <member name="F:UltimateOrb.FloatingPointRounding.ToNearestWithMidpointToEven">
            <summary>
            The IEEE Std 754 <c>roundTiesToEven</c>.
            </summary>
        </member>
        <member name="F:UltimateOrb.FloatingPointRounding.ToNearestWithMidpointAwayFromZero">
            <summary>
            The IEEE Std 754 <c>roundTiesToAway</c>.
            </summary>
        </member>
        <member name="F:UltimateOrb.FloatingPointRounding.Upward">
            <summary>
            The IEEE Std 754 <c>roundTowardPositive</c>.
            </summary>
        </member>
        <member name="F:UltimateOrb.FloatingPointRounding.Downward">
            <summary>
            The IEEE Std 754 <c>roundTowardNegative</c>.
            </summary>
        </member>
        <member name="F:UltimateOrb.FloatingPointRounding.TowardZero">
            <summary>
            The IEEE Std 754 <c>roundTowardZero</c>.
            </summary>
        </member>
        <member name="F:UltimateOrb.FloatingPointRounding.ToOdd">
            <summary>
            The sticky rounding, a.k.a. rounding to odd.
            </summary>
            <remarks>
            In binary arithmetic, this rounding is to round the result toward zero, and set the least significant bit to 1 if the rounded result is inexact.
            Equivalently, it consists in returning the intermediate result when it is exactly representable, and the nearest floating-point number with an odd significand otherwise.
            </remarks>
        </member>
        <member name="F:UltimateOrb.FloatingPointRounding.ToNearestWithMidpointToOdd">
            <summary>
            Similar to <see cref="F:UltimateOrb.FloatingPointRounding.ToNearestWithMidpointToEven"/> but round half to old. Only partially supported by UltimateOrb APIs.
            </summary>
        </member>
        <member name="M:UltimateOrb.Int128.TryParseCStyleNormalizedI128(System.String,UltimateOrb.Int128@)">
            <summary>
                <para>Parses a signed integer.</para>
            </summary>
            <returns></returns>
            <remarks>
                <para>The Number must be in format <c>[1-9][0-9]*</c>.</para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Int256.TryParseCStyleNormalizedI256(System.String,UltimateOrb.Int256@)">
            <summary>
                <para>Parses a signed integer.</para>
            </summary>
            <returns></returns>
            <remarks>
                <para>The Number must be in format <c>[1-9][0-9]*</c>.</para>
            </remarks>
        </member>
        <member name="T:UltimateOrb.Linq.EnumerableExtenstions">
            <inheritdoc cref="T:System.Linq.Enumerable"/>
        </member>
        <member name="M:UltimateOrb.Linq.EnumerableExtenstions.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <inheritdoc cref="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
        </member>
        <member name="M:UltimateOrb.Linq.EnumerableExtenstions.Skip_A``1(System.Collections.Generic.IEnumerable{``0},System.Int64)">
            <inheritdoc cref="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
        </member>
        <member name="T:UltimateOrb.Miscellaneous">
            <summary>
            Provides miscellaneous functions.
            </summary>
        </member>
        <member name="M:UltimateOrb.Miscellaneous.Likely(System.Boolean)">
            <summary>
            Hints that a boolean value is probably true.
            </summary>
            <param name="value">The boolean value.</param>
        </member>
        <member name="M:UltimateOrb.Miscellaneous.Unlikely(System.Boolean)">
            <summary>
            Hints that a boolean value is probably false.
            </summary>
            <param name="value">The boolean value.</param>
        </member>
        <member name="M:UltimateOrb.Miscellaneous.IgnoreOutParameter``1(``0@)">
            <summary>
            Specifies a parameter that is intentionally ignored.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The parameter to be ignored.</param>
        </member>
        <member name="M:UltimateOrb.Miscellaneous.IgnoreInParameter``1(``0@)">
            <summary>
            Specifies a parameter that is intentionally ignored.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The parameter to be ignored.</param>
        </member>
        <member name="M:UltimateOrb.Miscellaneous.IgnoreParameter``1(``0)">
            <summary>
            Specifies a parameter that is intentionally ignored.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The parameter to be ignored.</param>
        </member>
        <member name="T:UltimateOrb.NaNDefaultedDouble">
            <summary>
            Represents a double-precision value. It's like <see cref="T:System.Double"></see> but has NaN as the default value.
            </summary>
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.Value">
            <summary>
            The <see cref="T:System.Double"></see> value that this <see cref="T:UltimateOrb.NaNDefaultedDouble"></see> instance represents.
            </summary>
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.op_Implicit(System.Double)~UltimateOrb.NaNDefaultedDouble">
            <summary>
            Converts the specified <see cref="T:System.Double"></see> value to <see cref="T:UltimateOrb.NaNDefaultedDouble"></see> value.
            </summary>
            <param name="value">The specified value.</param>
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.op_Implicit(UltimateOrb.NaNDefaultedDouble)~System.Double">
            <summary>
            Converts the specified <see cref="T:UltimateOrb.NaNDefaultedDouble"></see> value to <see cref="T:System.Double"></see> value.
            </summary>
            <param name="value">The specified value.</param>
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.MinValue">
            <inheritdoc cref="F:System.Double.MinValue" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.MaxValue">
            <inheritdoc cref="F:System.Double.MaxValue" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.Epsilon">
            <inheritdoc cref="F:System.Double.Epsilon" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.NegativeInfinity">
            <inheritdoc cref="F:System.Double.NegativeInfinity" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.PositiveInfinity">
            <inheritdoc cref="F:System.Double.PositiveInfinity" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.NaN">
            <inheritdoc cref="F:System.Double.NaN" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.AdditiveIdentity">
            <summary>Represents the additive identity (0).</summary>
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.MultiplicativeIdentity">
            <summary>Represents the multiplicative identity (1).</summary>
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.One">
            <summary>Represents the number one (1).</summary>
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.Zero">
            <summary>Represents the number zero (0).</summary>
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.NegativeOne">
            <summary>Represents the number negative one (-1).</summary>
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.NegativeZero">
            <summary>Represents the number negative zero (-0).</summary>
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.E">
            <summary>Represents the natural logarithmic base, specified by the constant, e.</summary>
            <remarks>Euler's number is approximately 2.7182818284590452354.</remarks>
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.Pi">
            <summary>Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.</summary>
            <remarks>Pi is approximately 3.1415926535897932385.</remarks>
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.Tau">
            <summary>Represents the number of radians in one turn, specified by the constant, τ.</summary>
            <remarks>Tau is approximately 6.2831853071795864769.</remarks>
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsFinite(UltimateOrb.NaNDefaultedDouble)">
            <summary>Determines whether the specified value is finite (zero, subnormal, or normal).</summary>
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsInfinity(UltimateOrb.NaNDefaultedDouble)">
            <summary>Determines whether the specified value is infinite.</summary>
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsNaN(UltimateOrb.NaNDefaultedDouble)">
            <summary>Determines whether the specified value is NaN.</summary>
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsNegative(UltimateOrb.NaNDefaultedDouble)">
            <summary>Determines whether the specified value is negative.</summary>
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsNegativeInfinity(UltimateOrb.NaNDefaultedDouble)">
            <summary>Determines whether the specified value is negative infinity.</summary>
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsNormal(UltimateOrb.NaNDefaultedDouble)">
            <summary>Determines whether the specified value is normal.</summary>
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsPositiveInfinity(UltimateOrb.NaNDefaultedDouble)">
            <summary>Determines whether the specified value is positive infinity.</summary>
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsSubnormal(UltimateOrb.NaNDefaultedDouble)">
            <summary>Determines whether the specified value is subnormal.</summary>
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.CompareTo(System.Object)">
            <inheritdoc cref="M:System.Double.CompareTo(System.Object)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.CompareTo(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Double.CompareTo(System.Double)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Equals(System.Object)">
            <inheritdoc cref="M:System.Double.Equals(System.Object)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.op_Equality(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.op_Inequality(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.op_LessThan(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.op_GreaterThan(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.op_LessThanOrEqual(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.op_GreaterThanOrEqual(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Equals(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Double.Equals(System.Double)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.GetHashCode">
            <inheritdoc cref="M:System.Double.GetHashCode" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.ToString">
            <inheritdoc cref="M:System.Double.ToString" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.ToString(System.String)">
            <inheritdoc cref="M:System.Double.ToString(System.String)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.ToString(System.IFormatProvider)">
            <inheritdoc cref="M:System.Double.ToString(System.IFormatProvider)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.ToString(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:System.Double.ToString(System.String,System.IFormatProvider)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc cref="M:System.Double.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Parse(System.String)">
            <inheritdoc cref="M:System.Double.Parse(System.String)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Parse(System.String,System.Globalization.NumberStyles)">
            <inheritdoc cref="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Parse(System.String,System.IFormatProvider)">
            <inheritdoc cref="M:System.Double.Parse(System.String,System.IFormatProvider)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <inheritdoc cref="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
            <inheritdoc cref="M:System.Double.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.TryParse(System.String,UltimateOrb.NaNDefaultedDouble@)">
            <inheritdoc cref="M:System.Double.TryParse(System.String,System.Double@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.TryParse(System.ReadOnlySpan{System.Char},UltimateOrb.NaNDefaultedDouble@)">
            <inheritdoc cref="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Double@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,UltimateOrb.NaNDefaultedDouble@)">
            <inheritdoc cref="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,UltimateOrb.NaNDefaultedDouble@)">
            <inheritdoc cref="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.GetTypeCode">
            <inheritdoc cref="M:System.Double.GetTypeCode" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IAdditionOperators{UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble}#op_Addition(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IAdditionOperators`3.op_Addition(`0,`1)" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#IAdditiveIdentity{UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble}#AdditiveIdentity">
            <inheritdoc cref="P:System.Numerics.IAdditiveIdentity`2.AdditiveIdentity" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#IBinaryNumber{UltimateOrb#NaNDefaultedDouble}#AllBitsSet">
            <inheritdoc cref="P:System.Numerics.IBinaryNumber`1.AllBitsSet" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsPow2(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IBinaryNumber`1.IsPow2(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Log2(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IBinaryNumber`1.Log2(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IBitwiseOperators{UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble}#op_BitwiseAnd(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IBitwiseOperators`3.op_BitwiseAnd(`0,`1)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IBitwiseOperators{UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble}#op_BitwiseOr(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IBitwiseOperators`3.op_BitwiseOr(`0,`1)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IBitwiseOperators{UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble}#op_ExclusiveOr(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IBitwiseOperators`3.op_ExclusiveOr(`0,`1)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IBitwiseOperators{UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble}#op_OnesComplement(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IBitwiseOperators`3.op_OnesComplement(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IDecrementOperators{UltimateOrb#NaNDefaultedDouble}#op_Decrement(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IDecrementOperators`1.op_Decrement(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IDivisionOperators{UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble}#op_Division(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IDivisionOperators`3.op_Division(`0,`1)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Exp(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IExponentialFunctions`1.Exp(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.ExpM1(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IExponentialFunctions`1.ExpM1(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Exp2(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IExponentialFunctions`1.Exp2(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Exp2M1(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IExponentialFunctions`1.Exp2M1(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Exp10(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IExponentialFunctions`1.Exp10(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Exp10M1(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IExponentialFunctions`1.Exp10M1(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Ceiling(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Ceiling(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Floor(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Floor(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Round(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Round(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Round(UltimateOrb.NaNDefaultedDouble,System.Int32)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Round(`0,System.Int32)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Round(UltimateOrb.NaNDefaultedDouble,System.MidpointRounding)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Round(`0,System.MidpointRounding)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Round(UltimateOrb.NaNDefaultedDouble,System.Int32,System.MidpointRounding)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Round(`0,System.Int32,System.MidpointRounding)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Truncate(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.Truncate(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPoint{UltimateOrb#NaNDefaultedDouble}#GetExponentByteCount">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.GetExponentByteCount" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPoint{UltimateOrb#NaNDefaultedDouble}#GetExponentShortestBitLength">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.GetExponentShortestBitLength" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPoint{UltimateOrb#NaNDefaultedDouble}#GetSignificandByteCount">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.GetSignificandByteCount" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPoint{UltimateOrb#NaNDefaultedDouble}#GetSignificandBitLength">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.GetSignificandBitLength" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPoint{UltimateOrb#NaNDefaultedDouble}#TryWriteExponentBigEndian(System.Span{System.Byte},System.Int32@)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.TryWriteExponentBigEndian(System.Span{System.Byte},System.Int32@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPoint{UltimateOrb#NaNDefaultedDouble}#TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPoint{UltimateOrb#NaNDefaultedDouble}#TryWriteSignificandBigEndian(System.Span{System.Byte},System.Int32@)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.TryWriteSignificandBigEndian(System.Span{System.Byte},System.Int32@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPoint{UltimateOrb#NaNDefaultedDouble}#TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@)">
            <inheritdoc cref="M:System.Numerics.IFloatingPoint`1.TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@)" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPointConstants{UltimateOrb#NaNDefaultedDouble}#E">
            <inheritdoc cref="P:System.Numerics.IFloatingPointConstants`1.E" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPointConstants{UltimateOrb#NaNDefaultedDouble}#Pi">
            <inheritdoc cref="P:System.Numerics.IFloatingPointConstants`1.Pi" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPointConstants{UltimateOrb#NaNDefaultedDouble}#Tau">
            <inheritdoc cref="P:System.Numerics.IFloatingPointConstants`1.Tau" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPointIeee754{UltimateOrb#NaNDefaultedDouble}#Epsilon">
            <inheritdoc cref="P:System.Numerics.IFloatingPointIeee754`1.Epsilon" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPointIeee754{UltimateOrb#NaNDefaultedDouble}#NaN">
            <inheritdoc cref="P:System.Numerics.IFloatingPointIeee754`1.NaN" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPointIeee754{UltimateOrb#NaNDefaultedDouble}#NegativeInfinity">
            <inheritdoc cref="P:System.Numerics.IFloatingPointIeee754`1.NegativeInfinity" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPointIeee754{UltimateOrb#NaNDefaultedDouble}#NegativeZero">
            <inheritdoc cref="P:System.Numerics.IFloatingPointIeee754`1.NegativeZero" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#IFloatingPointIeee754{UltimateOrb#NaNDefaultedDouble}#PositiveInfinity">
            <inheritdoc cref="P:System.Numerics.IFloatingPointIeee754`1.PositiveInfinity" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Atan2(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.Atan2(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Atan2Pi(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.Atan2Pi(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.BitDecrement(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.BitDecrement(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.BitIncrement(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.BitIncrement(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.FusedMultiplyAdd(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.FusedMultiplyAdd(`0,`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Ieee754Remainder(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.Ieee754Remainder(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.ILogB(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.ILogB(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.ReciprocalEstimate(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.ReciprocalEstimate(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.ReciprocalSqrtEstimate(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.ReciprocalSqrtEstimate(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.ScaleB(UltimateOrb.NaNDefaultedDouble,System.Int32)">
            <inheritdoc cref="M:System.Numerics.IFloatingPointIeee754`1.ScaleB(`0,System.Int32)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Acosh(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IHyperbolicFunctions`1.Acosh(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Asinh(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IHyperbolicFunctions`1.Asinh(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Atanh(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IHyperbolicFunctions`1.Atanh(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Cosh(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IHyperbolicFunctions`1.Cosh(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Sinh(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IHyperbolicFunctions`1.Sinh(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Tanh(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IHyperbolicFunctions`1.Tanh(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IIncrementOperators{UltimateOrb#NaNDefaultedDouble}#op_Increment(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IIncrementOperators`1.op_Increment(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Log(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ILogarithmicFunctions`1.Log(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Log(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ILogarithmicFunctions`1.Log(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.LogP1(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ILogarithmicFunctions`1.LogP1(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Log2P1(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ILogarithmicFunctions`1.Log2P1(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Log10(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ILogarithmicFunctions`1.Log10(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Log10P1(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ILogarithmicFunctions`1.Log10P1(`0)" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#IMinMaxValue{UltimateOrb#NaNDefaultedDouble}#MinValue">
            <inheritdoc cref="P:System.Numerics.IMinMaxValue`1.MinValue" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#IMinMaxValue{UltimateOrb#NaNDefaultedDouble}#MaxValue">
            <inheritdoc cref="P:System.Numerics.IMinMaxValue`1.MaxValue" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IModulusOperators{UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble}#op_Modulus(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IModulusOperators`3.op_Modulus(`0,`1)" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#IMultiplicativeIdentity{UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble}#MultiplicativeIdentity">
            <inheritdoc cref="P:System.Numerics.IMultiplicativeIdentity`2.MultiplicativeIdentity" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IMultiplyOperators{UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble}#op_Multiply(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IMultiplyOperators`3.op_Multiply(`0,`1)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Clamp(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumber`1.Clamp(`0,`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.CopySign(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumber`1.CopySign(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Max(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumber`1.Max(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.MaxNumber(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumber`1.MaxNumber(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Min(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumber`1.Min(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.MinNumber(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumber`1.MinNumber(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Sign(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumber`1.Sign(`0)" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#INumberBase{UltimateOrb#NaNDefaultedDouble}#One">
            <inheritdoc cref="P:System.Numerics.INumberBase`1.One" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#INumberBase{UltimateOrb#NaNDefaultedDouble}#Radix">
            <inheritdoc cref="P:System.Numerics.INumberBase`1.Radix" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#INumberBase{UltimateOrb#NaNDefaultedDouble}#Zero">
            <inheritdoc cref="P:System.Numerics.INumberBase`1.Zero" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Abs(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.Abs(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.CreateChecked``1(``0)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.CreateChecked``1(``0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.CreateSaturating``1(``0)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.CreateSaturating``1(``0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.CreateTruncating``1(``0)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.CreateTruncating``1(``0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#INumberBase{UltimateOrb#NaNDefaultedDouble}#IsCanonical(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsCanonical(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#INumberBase{UltimateOrb#NaNDefaultedDouble}#IsComplexNumber(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsComplexNumber(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsEvenInteger(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsEvenInteger(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#INumberBase{UltimateOrb#NaNDefaultedDouble}#IsImaginaryNumber(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsImaginaryNumber(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsInteger(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsInteger(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsOddInteger(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsOddInteger(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsPositive(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsPositive(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.IsRealNumber(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsRealNumber(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#INumberBase{UltimateOrb#NaNDefaultedDouble}#IsZero(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.IsZero(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.MaxMagnitude(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.MaxMagnitude(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.MaxMagnitudeNumber(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.MaxMagnitudeNumber(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.MinMagnitude(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.MinMagnitude(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.MinMagnitudeNumber(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.MinMagnitudeNumber(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#INumberBase{UltimateOrb#NaNDefaultedDouble}#TryConvertFromChecked``1(``0,UltimateOrb.NaNDefaultedDouble@)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.TryConvertFromChecked``1(``0,`0@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#INumberBase{UltimateOrb#NaNDefaultedDouble}#TryConvertFromSaturating``1(``0,UltimateOrb.NaNDefaultedDouble@)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.TryConvertFromSaturating``1(``0,`0@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#INumberBase{UltimateOrb#NaNDefaultedDouble}#TryConvertFromTruncating``1(``0,UltimateOrb.NaNDefaultedDouble@)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.TryConvertFromTruncating``1(``0,`0@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#INumberBase{UltimateOrb#NaNDefaultedDouble}#TryConvertToChecked``1(UltimateOrb.NaNDefaultedDouble,``0@)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.TryConvertToChecked``1(`0,``0@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#INumberBase{UltimateOrb#NaNDefaultedDouble}#TryConvertToSaturating``1(UltimateOrb.NaNDefaultedDouble,``0@)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.TryConvertToSaturating``1(`0,``0@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#INumberBase{UltimateOrb#NaNDefaultedDouble}#TryConvertToTruncating``1(UltimateOrb.NaNDefaultedDouble,``0@)">
            <inheritdoc cref="M:System.Numerics.INumberBase`1.TryConvertToTruncating``1(`0,``0@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.TryParse(System.String,System.IFormatProvider,UltimateOrb.NaNDefaultedDouble@)">
            <inheritdoc cref="M:System.Double.TryParse(System.String,System.IFormatProvider,System.Double@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Pow(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IPowerFunctions`1.Pow(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Cbrt(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IRootFunctions`1.Cbrt(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Hypot(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IRootFunctions`1.Hypot(`0,`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.RootN(UltimateOrb.NaNDefaultedDouble,System.Int32)">
            <inheritdoc cref="M:System.Numerics.IRootFunctions`1.RootN(`0,System.Int32)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Sqrt(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IRootFunctions`1.Sqrt(`0)" />
        </member>
        <member name="P:UltimateOrb.NaNDefaultedDouble.System#Numerics#ISignedNumber{UltimateOrb#NaNDefaultedDouble}#NegativeOne">
            <inheritdoc cref="P:System.Numerics.ISignedNumber`1.NegativeOne" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc cref="M:System.ISpanParsable`1.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,UltimateOrb.NaNDefaultedDouble@)">
            <inheritdoc cref="M:System.ISpanParsable`1.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,`0@)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#ISubtractionOperators{UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble}#op_Subtraction(UltimateOrb.NaNDefaultedDouble,UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ISubtractionOperators`3.op_Subtraction(`0,`1)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Acos(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.Acos(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.AcosPi(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.AcosPi(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Asin(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.Asin(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.AsinPi(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.AsinPi(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Atan(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.Atan(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.AtanPi(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.AtanPi(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Cos(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.Cos(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.CosPi(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.CosPi(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Sin(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.Sin(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.SinCos(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.SinCos(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.SinCosPi(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.SinCos(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.SinPi(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.SinPi(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.Tan(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.Tan(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.TanPi(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.ITrigonometricFunctions`1.TanPi(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IUnaryNegationOperators{UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble}#op_UnaryNegation(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IUnaryNegationOperators`2.op_UnaryNegation(`0)" />
        </member>
        <member name="M:UltimateOrb.NaNDefaultedDouble.System#Numerics#IUnaryPlusOperators{UltimateOrb#NaNDefaultedDouble,UltimateOrb#NaNDefaultedDouble}#op_UnaryPlus(UltimateOrb.NaNDefaultedDouble)">
            <inheritdoc cref="M:System.Numerics.IUnaryPlusOperators`2.op_UnaryPlus(`0)" />
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAnd(System.UInt32@,System.UInt32@,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseOr(System.UInt32@,System.UInt32@,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseXor(System.UInt32@,System.UInt32@,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAndNot(System.UInt32@,System.UInt32@,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnchecked(System.UInt32@,System.UInt32@,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnsigned(System.UInt32@,System.UInt32@,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddSigned(System.UInt32@,System.UInt32@,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnchecked(System.UInt32@,System.UInt32@,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnsigned(System.UInt32@,System.UInt32@,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractSigned(System.UInt32@,System.UInt32@,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnchecked(System.UInt32@,System.UInt32@,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnsigned(System.UInt32@,System.UInt32@,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplySigned(System.UInt32@,System.UInt32@,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAnd(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseOr(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseXor(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAndNot(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnchecked(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnsigned(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddSigned(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnchecked(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnsigned(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractSigned(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnchecked(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnsigned(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplySigned(System.Int32@,System.Int32@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAnd(System.UInt64@,System.UInt64@,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseOr(System.UInt64@,System.UInt64@,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseXor(System.UInt64@,System.UInt64@,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAndNot(System.UInt64@,System.UInt64@,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnchecked(System.UInt64@,System.UInt64@,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnsigned(System.UInt64@,System.UInt64@,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddSigned(System.UInt64@,System.UInt64@,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnchecked(System.UInt64@,System.UInt64@,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnsigned(System.UInt64@,System.UInt64@,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractSigned(System.UInt64@,System.UInt64@,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnchecked(System.UInt64@,System.UInt64@,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnsigned(System.UInt64@,System.UInt64@,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplySigned(System.UInt64@,System.UInt64@,System.UInt64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAnd(System.Int64@,System.Int64@,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseOr(System.Int64@,System.Int64@,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseXor(System.Int64@,System.Int64@,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAndNot(System.Int64@,System.Int64@,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnchecked(System.Int64@,System.Int64@,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnsigned(System.Int64@,System.Int64@,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddSigned(System.Int64@,System.Int64@,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnchecked(System.Int64@,System.Int64@,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnsigned(System.Int64@,System.Int64@,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractSigned(System.Int64@,System.Int64@,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnchecked(System.Int64@,System.Int64@,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnsigned(System.Int64@,System.Int64@,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplySigned(System.Int64@,System.Int64@,System.Int64@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAnd(UltimateOrb.UInt128@,UltimateOrb.UInt128@,UltimateOrb.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseOr(UltimateOrb.UInt128@,UltimateOrb.UInt128@,UltimateOrb.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseXor(UltimateOrb.UInt128@,UltimateOrb.UInt128@,UltimateOrb.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAndNot(UltimateOrb.UInt128@,UltimateOrb.UInt128@,UltimateOrb.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnchecked(UltimateOrb.UInt128@,UltimateOrb.UInt128@,UltimateOrb.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnsigned(UltimateOrb.UInt128@,UltimateOrb.UInt128@,UltimateOrb.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddSigned(UltimateOrb.UInt128@,UltimateOrb.UInt128@,UltimateOrb.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnchecked(UltimateOrb.UInt128@,UltimateOrb.UInt128@,UltimateOrb.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnsigned(UltimateOrb.UInt128@,UltimateOrb.UInt128@,UltimateOrb.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractSigned(UltimateOrb.UInt128@,UltimateOrb.UInt128@,UltimateOrb.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnchecked(UltimateOrb.UInt128@,UltimateOrb.UInt128@,UltimateOrb.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnsigned(UltimateOrb.UInt128@,UltimateOrb.UInt128@,UltimateOrb.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplySigned(UltimateOrb.UInt128@,UltimateOrb.UInt128@,UltimateOrb.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAnd(UltimateOrb.Int128@,UltimateOrb.Int128@,UltimateOrb.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseOr(UltimateOrb.Int128@,UltimateOrb.Int128@,UltimateOrb.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseXor(UltimateOrb.Int128@,UltimateOrb.Int128@,UltimateOrb.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAndNot(UltimateOrb.Int128@,UltimateOrb.Int128@,UltimateOrb.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnchecked(UltimateOrb.Int128@,UltimateOrb.Int128@,UltimateOrb.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnsigned(UltimateOrb.Int128@,UltimateOrb.Int128@,UltimateOrb.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddSigned(UltimateOrb.Int128@,UltimateOrb.Int128@,UltimateOrb.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnchecked(UltimateOrb.Int128@,UltimateOrb.Int128@,UltimateOrb.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnsigned(UltimateOrb.Int128@,UltimateOrb.Int128@,UltimateOrb.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractSigned(UltimateOrb.Int128@,UltimateOrb.Int128@,UltimateOrb.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnchecked(UltimateOrb.Int128@,UltimateOrb.Int128@,UltimateOrb.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnsigned(UltimateOrb.Int128@,UltimateOrb.Int128@,UltimateOrb.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplySigned(UltimateOrb.Int128@,UltimateOrb.Int128@,UltimateOrb.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAnd(System.UInt128@,System.UInt128@,System.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseOr(System.UInt128@,System.UInt128@,System.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseXor(System.UInt128@,System.UInt128@,System.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAndNot(System.UInt128@,System.UInt128@,System.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnchecked(System.UInt128@,System.UInt128@,System.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnsigned(System.UInt128@,System.UInt128@,System.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddSigned(System.UInt128@,System.UInt128@,System.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnchecked(System.UInt128@,System.UInt128@,System.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnsigned(System.UInt128@,System.UInt128@,System.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractSigned(System.UInt128@,System.UInt128@,System.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnchecked(System.UInt128@,System.UInt128@,System.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnsigned(System.UInt128@,System.UInt128@,System.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplySigned(System.UInt128@,System.UInt128@,System.UInt128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAnd(System.Int128@,System.Int128@,System.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseOr(System.Int128@,System.Int128@,System.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseXor(System.Int128@,System.Int128@,System.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAndNot(System.Int128@,System.Int128@,System.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnchecked(System.Int128@,System.Int128@,System.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnsigned(System.Int128@,System.Int128@,System.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddSigned(System.Int128@,System.Int128@,System.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnchecked(System.Int128@,System.Int128@,System.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnsigned(System.Int128@,System.Int128@,System.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractSigned(System.Int128@,System.Int128@,System.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnchecked(System.Int128@,System.Int128@,System.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnsigned(System.Int128@,System.Int128@,System.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplySigned(System.Int128@,System.Int128@,System.Int128@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAnd(UltimateOrb.UInt256@,UltimateOrb.UInt256@,UltimateOrb.UInt256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseOr(UltimateOrb.UInt256@,UltimateOrb.UInt256@,UltimateOrb.UInt256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseXor(UltimateOrb.UInt256@,UltimateOrb.UInt256@,UltimateOrb.UInt256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAndNot(UltimateOrb.UInt256@,UltimateOrb.UInt256@,UltimateOrb.UInt256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnchecked(UltimateOrb.UInt256@,UltimateOrb.UInt256@,UltimateOrb.UInt256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnsigned(UltimateOrb.UInt256@,UltimateOrb.UInt256@,UltimateOrb.UInt256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddSigned(UltimateOrb.UInt256@,UltimateOrb.UInt256@,UltimateOrb.UInt256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnchecked(UltimateOrb.UInt256@,UltimateOrb.UInt256@,UltimateOrb.UInt256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnsigned(UltimateOrb.UInt256@,UltimateOrb.UInt256@,UltimateOrb.UInt256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractSigned(UltimateOrb.UInt256@,UltimateOrb.UInt256@,UltimateOrb.UInt256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnchecked(UltimateOrb.UInt256@,UltimateOrb.UInt256@,UltimateOrb.UInt256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnsigned(UltimateOrb.UInt256@,UltimateOrb.UInt256@,UltimateOrb.UInt256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplySigned(UltimateOrb.UInt256@,UltimateOrb.UInt256@,UltimateOrb.UInt256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAnd(UltimateOrb.Int256@,UltimateOrb.Int256@,UltimateOrb.Int256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseOr(UltimateOrb.Int256@,UltimateOrb.Int256@,UltimateOrb.Int256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseXor(UltimateOrb.Int256@,UltimateOrb.Int256@,UltimateOrb.Int256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAndNot(UltimateOrb.Int256@,UltimateOrb.Int256@,UltimateOrb.Int256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnchecked(UltimateOrb.Int256@,UltimateOrb.Int256@,UltimateOrb.Int256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnsigned(UltimateOrb.Int256@,UltimateOrb.Int256@,UltimateOrb.Int256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddSigned(UltimateOrb.Int256@,UltimateOrb.Int256@,UltimateOrb.Int256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnchecked(UltimateOrb.Int256@,UltimateOrb.Int256@,UltimateOrb.Int256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnsigned(UltimateOrb.Int256@,UltimateOrb.Int256@,UltimateOrb.Int256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractSigned(UltimateOrb.Int256@,UltimateOrb.Int256@,UltimateOrb.Int256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnchecked(UltimateOrb.Int256@,UltimateOrb.Int256@,UltimateOrb.Int256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnsigned(UltimateOrb.Int256@,UltimateOrb.Int256@,UltimateOrb.Int256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplySigned(UltimateOrb.Int256@,UltimateOrb.Int256@,UltimateOrb.Int256@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAnd(System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseOr(System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseXor(System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.BitwiseAndNot(System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnchecked(System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddUnsigned(System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.AddSigned(System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnchecked(System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractUnsigned(System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.SubtractSigned(System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnchecked(System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplyUnsigned(System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BasicArithmeticForWellKnownTypesProvider.MultiplySigned(System.Numerics.BigInteger@,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <inheritdoc/>
        </member>
        <member name="M:UltimateOrb.Numerics.BigIntegerWrappers.BigIntegerExtensions.GetBitLength(System.Numerics.BigInteger)">
            <summary>
            Gets the number of bits required for shortest two's complement representation of the current instance without the sign bit.
            </summary>
            <returns>The minimum non-negative number of bits in two's complement notation without the sign bit.</returns>
            <remarks>This method returns 0 iff the value of current object is equal to <see cref="!:Zero"/> or <see cref="!:MinusOne"/>. For positive integers the return value is equal to the ordinary binary representation string length.</remarks>
        </member>
        <member name="T:UltimateOrb.Numerics.DoubleArithmetic">
            <summary>
                <para>
                    Provides double precision operations of <see cref="T:System.Int64"/> and <see cref="T:System.UInt64"/> and other operations to support longer numeric data types. 
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AbsSignedAsUnsigned(System.UInt64,System.Int64,System.UInt64@)">
            <summary>
                <para>
                    Computes the absolute value of the specified value of a signed operand with double-precision data.
                    The result is an unsigned value with double-precision data.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AbsSignedAsUnsigned(System.UInt128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Computes the absolute value of the specified value of a signed operand with double-precision data.
                    The result is an unsigned value with double-precision data.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AbsSignedAsUnsigned(UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Computes the absolute value of the specified value of a signed operand with double-precision data.
                    The result is an unsigned value with double-precision data.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NextPermutation(System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Computes the bit pattern of the next permutation in the lexicographical order.
                    If the current permutation is already the maximum, the result will be the pattern with all bits <c>1</c>.
                </para>
            </summary>
            <param name="lo">
                <para>The <c>lo</c> part of the current bit pattern.</para>
            </param>
            <param name="hi">
                <para>The <c>hi</c> part of the current bit pattern.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> part of the next bit pattern.</para>
            </param>
            <returns>
                <para>The <c>lo</c> part of the next bit pattern.</para>
            </returns>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NextPermutation``1(``0,``0,``0@)">
            <summary>
                <para>
                    Computes the bit pattern of the next permutation in the lexicographical order.
                    If the current permutation is already the maximum, the result will be the pattern with all bits <c>1</c>.
                </para>
            </summary>
            <param name="lo">
                <para>The <c>lo</c> part of the current bit pattern.</para>
            </param>
            <param name="hi">
                <para>The <c>hi</c> part of the current bit pattern.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> part of the next bit pattern.</para>
            </param>
            <returns>
                <para>The <c>lo</c> part of the next bit pattern.</para>
            </returns>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnchecked(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Adds the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddSigned(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Adds the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnsigned(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Adds the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnchecked(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Subtracts the value of one operand with double-precision data from the value of another operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractSigned(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Subtracts the value of one signed operand with double-precision data from the value of another signed operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnsigned(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Subtracts the value of one unsigned operand with double-precision data from the value of another unsigned operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnchecked(System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Negates the specified value of an operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateSigned(System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Negates the specified value of a signed operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnsigned(System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Negates the specified value of an unsigned operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnchecked(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Multiplies the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplySigned(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Multiplies the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnsigned(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Multiplies the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnchecked(System.UInt64,System.Int64,System.UInt64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Adds the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddSigned(System.UInt64,System.Int64,System.UInt64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Adds the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnsigned(System.UInt64,System.Int64,System.UInt64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Adds the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnchecked(System.UInt64,System.Int64,System.UInt64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Subtracts the value of one operand with double-precision data from the value of another operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractSigned(System.UInt64,System.Int64,System.UInt64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Subtracts the value of one signed operand with double-precision data from the value of another signed operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnsigned(System.UInt64,System.Int64,System.UInt64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Subtracts the value of one unsigned operand with double-precision data from the value of another unsigned operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnchecked(System.UInt64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Negates the specified value of an operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateSigned(System.UInt64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Negates the specified value of a signed operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnsigned(System.UInt64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Negates the specified value of an unsigned operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnchecked(System.UInt64,System.Int64,System.UInt64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Multiplies the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplySigned(System.UInt64,System.Int64,System.UInt64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Multiplies the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnsigned(System.UInt64,System.Int64,System.UInt64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Multiplies the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnchecked(System.Int64,System.UInt64,System.Int64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Adds the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddSigned(System.Int64,System.UInt64,System.Int64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Adds the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnsigned(System.Int64,System.UInt64,System.Int64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Adds the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnchecked(System.Int64,System.UInt64,System.Int64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Subtracts the value of one operand with double-precision data from the value of another operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractSigned(System.Int64,System.UInt64,System.Int64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Subtracts the value of one signed operand with double-precision data from the value of another signed operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnsigned(System.Int64,System.UInt64,System.Int64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Subtracts the value of one unsigned operand with double-precision data from the value of another unsigned operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnchecked(System.Int64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Negates the specified value of an operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateSigned(System.Int64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Negates the specified value of a signed operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnsigned(System.Int64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Negates the specified value of an unsigned operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnchecked(System.Int64,System.UInt64,System.Int64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Multiplies the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplySigned(System.Int64,System.UInt64,System.Int64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Multiplies the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnsigned(System.Int64,System.UInt64,System.Int64,System.UInt64,System.UInt64@)">
            <summary>
                <para>
                    Multiplies the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnchecked(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Adds the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddSigned(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Adds the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnsigned(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Adds the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnchecked(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Subtracts the value of one operand with double-precision data from the value of another operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractSigned(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Subtracts the value of one signed operand with double-precision data from the value of another signed operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnsigned(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Subtracts the value of one unsigned operand with double-precision data from the value of another unsigned operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnchecked(System.Int64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Negates the specified value of an operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateSigned(System.Int64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Negates the specified value of a signed operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnsigned(System.Int64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Negates the specified value of an unsigned operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnchecked(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Multiplies the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplySigned(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Multiplies the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnsigned(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64@)">
            <summary>
                <para>
                    Multiplies the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnchecked(System.UInt128,System.UInt128,System.UInt128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Adds the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddSigned(System.UInt128,System.UInt128,System.UInt128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Adds the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnsigned(System.UInt128,System.UInt128,System.UInt128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Adds the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnchecked(System.UInt128,System.UInt128,System.UInt128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Subtracts the value of one operand with double-precision data from the value of another operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractSigned(System.UInt128,System.UInt128,System.UInt128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Subtracts the value of one signed operand with double-precision data from the value of another signed operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnsigned(System.UInt128,System.UInt128,System.UInt128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Subtracts the value of one unsigned operand with double-precision data from the value of another unsigned operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnchecked(System.UInt128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Negates the specified value of an operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateSigned(System.UInt128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Negates the specified value of a signed operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnsigned(System.UInt128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Negates the specified value of an unsigned operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnchecked(System.UInt128,System.UInt128,System.UInt128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Multiplies the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplySigned(System.UInt128,System.UInt128,System.UInt128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Multiplies the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnsigned(System.UInt128,System.UInt128,System.UInt128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Multiplies the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnchecked(System.UInt128,System.Int128,System.UInt128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Adds the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddSigned(System.UInt128,System.Int128,System.UInt128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Adds the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnsigned(System.UInt128,System.Int128,System.UInt128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Adds the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnchecked(System.UInt128,System.Int128,System.UInt128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Subtracts the value of one operand with double-precision data from the value of another operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractSigned(System.UInt128,System.Int128,System.UInt128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Subtracts the value of one signed operand with double-precision data from the value of another signed operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnsigned(System.UInt128,System.Int128,System.UInt128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Subtracts the value of one unsigned operand with double-precision data from the value of another unsigned operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnchecked(System.UInt128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Negates the specified value of an operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateSigned(System.UInt128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Negates the specified value of a signed operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnsigned(System.UInt128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Negates the specified value of an unsigned operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnchecked(System.UInt128,System.Int128,System.UInt128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Multiplies the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplySigned(System.UInt128,System.Int128,System.UInt128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Multiplies the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnsigned(System.UInt128,System.Int128,System.UInt128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Multiplies the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnchecked(System.Int128,System.UInt128,System.Int128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Adds the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddSigned(System.Int128,System.UInt128,System.Int128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Adds the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnsigned(System.Int128,System.UInt128,System.Int128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Adds the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnchecked(System.Int128,System.UInt128,System.Int128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Subtracts the value of one operand with double-precision data from the value of another operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractSigned(System.Int128,System.UInt128,System.Int128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Subtracts the value of one signed operand with double-precision data from the value of another signed operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnsigned(System.Int128,System.UInt128,System.Int128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Subtracts the value of one unsigned operand with double-precision data from the value of another unsigned operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnchecked(System.Int128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Negates the specified value of an operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateSigned(System.Int128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Negates the specified value of a signed operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnsigned(System.Int128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Negates the specified value of an unsigned operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnchecked(System.Int128,System.UInt128,System.Int128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Multiplies the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplySigned(System.Int128,System.UInt128,System.Int128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Multiplies the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnsigned(System.Int128,System.UInt128,System.Int128,System.UInt128,System.UInt128@)">
            <summary>
                <para>
                    Multiplies the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnchecked(System.Int128,System.Int128,System.Int128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Adds the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddSigned(System.Int128,System.Int128,System.Int128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Adds the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnsigned(System.Int128,System.Int128,System.Int128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Adds the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnchecked(System.Int128,System.Int128,System.Int128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Subtracts the value of one operand with double-precision data from the value of another operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractSigned(System.Int128,System.Int128,System.Int128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Subtracts the value of one signed operand with double-precision data from the value of another signed operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnsigned(System.Int128,System.Int128,System.Int128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Subtracts the value of one unsigned operand with double-precision data from the value of another unsigned operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnchecked(System.Int128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Negates the specified value of an operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateSigned(System.Int128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Negates the specified value of a signed operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnsigned(System.Int128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Negates the specified value of an unsigned operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnchecked(System.Int128,System.Int128,System.Int128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Multiplies the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplySigned(System.Int128,System.Int128,System.Int128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Multiplies the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnsigned(System.Int128,System.Int128,System.Int128,System.Int128,System.Int128@)">
            <summary>
                <para>
                    Multiplies the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnchecked(UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Adds the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddSigned(UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Adds the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnsigned(UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Adds the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnchecked(UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Subtracts the value of one operand with double-precision data from the value of another operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractSigned(UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Subtracts the value of one signed operand with double-precision data from the value of another signed operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnsigned(UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Subtracts the value of one unsigned operand with double-precision data from the value of another unsigned operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnchecked(UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Negates the specified value of an operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateSigned(UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Negates the specified value of a signed operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnsigned(UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Negates the specified value of an unsigned operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnchecked(UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Multiplies the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplySigned(UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Multiplies the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnsigned(UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Multiplies the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnchecked(UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Adds the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddSigned(UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Adds the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnsigned(UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Adds the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnchecked(UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Subtracts the value of one operand with double-precision data from the value of another operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractSigned(UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Subtracts the value of one signed operand with double-precision data from the value of another signed operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnsigned(UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Subtracts the value of one unsigned operand with double-precision data from the value of another unsigned operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnchecked(UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Negates the specified value of an operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateSigned(UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Negates the specified value of a signed operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnsigned(UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Negates the specified value of an unsigned operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnchecked(UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Multiplies the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplySigned(UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Multiplies the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnsigned(UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Multiplies the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnchecked(UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Adds the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddSigned(UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Adds the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnsigned(UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Adds the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnchecked(UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Subtracts the value of one operand with double-precision data from the value of another operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractSigned(UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Subtracts the value of one signed operand with double-precision data from the value of another signed operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnsigned(UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Subtracts the value of one unsigned operand with double-precision data from the value of another unsigned operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnchecked(UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Negates the specified value of an operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateSigned(UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Negates the specified value of a signed operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnsigned(UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Negates the specified value of an unsigned operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnchecked(UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Multiplies the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplySigned(UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Multiplies the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnsigned(UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.Int128,UltimateOrb.UInt128,UltimateOrb.UInt128@)">
            <summary>
                <para>
                    Multiplies the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnchecked(UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Adds the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddSigned(UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Adds the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.AddUnsigned(UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Adds the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnchecked(UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Subtracts the value of one operand with double-precision data from the value of another operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractSigned(UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Subtracts the value of one signed operand with double-precision data from the value of another signed operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SubtractUnsigned(UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Subtracts the value of one unsigned operand with double-precision data from the value of another unsigned operand with double-precision data and returns the result.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnchecked(UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Negates the specified value of an operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateSigned(UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Negates the specified value of a signed operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.NegateUnsigned(UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Negates the specified value of an unsigned operand with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="value_lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="value_hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnchecked(UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Multiplies the specified values of two operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, no exception will be thrown and the result will be truncated, ignoring the bits beyond the precision.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    Of this operation, the sign interpretations of the operands do not matter and both signed and unsigned versions yield the same results.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplySigned(UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Multiplies the specified values of two signed operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as signed operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.MultiplyUnsigned(UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128,UltimateOrb.Int128@)">
            <summary>
                <para>
                    Multiplies the specified values of two unsigned operands with double-precision data.
                    If the result can not be represented in regard to the precision of the destination, <see cref="T:System.OverflowException"/> will be thrown.
                </para>
            </summary>
            <param name="first_lo">
                <para>The <c>lo</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="first_hi">
                <para>The <c>hi</c> bits of the double-precision data of the first operand.</para>
            </param>
            <param name="second_lo">
                <para>The <c>lo</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="second_hi">
                <para>The <c>hi</c> bits of the double-precision data of the second operand.</para>
            </param>
            <param name="result_hi">
                <para>The <c>hi</c> bits of the double-precision data of the result.</para>
            </param>
            <returns>
                <para>The <c>lo</c> bits of the double-precision data of the result.</para>
            </returns>
            <remarks>
                <para>
                    The operands of this operation are interpreted as unsigned operands regardless of the sign interpretations implied from their signatures.
                </para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.BigSqrt(System.UInt64,System.UInt32)">
            <summary>
                <para>
                    Returns the square root of the specified value of an operand with double-precision data.
                </para>
            </summary>
            <param name="lo">
                <para>The <c>lo</c> bits of the double-precision data of the operand.</para>
            </param>
            <param name="hi">
                <para>The <c>hi</c> bits of the double-precision data of the operand.</para>
            </param>
            <returns>
                <para>The square root.</para>
            </returns>
            <remarks>
                <para>The result is rounded towards zero.</para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.BigSqrt(System.UInt64,System.UInt64)">
            <summary>
                <para>Returns the square root of a specified value of an operand with double-precision data.</para>
            </summary>
            <param name="lo">
                <para>The <c>lo</c> bits of the radicand.</para>
            </param>
            <param name="hi">
                <para>The <c>hi</c> bits of the radicand.</para>
            </param>
            <returns>
                <para>The square root.</para>
            </returns>
        </member>
        <member name="M:UltimateOrb.Numerics.DoubleArithmetic.SqrtDouble(System.UInt64)">
            <summary>
                <para>Returns the square root of a specified number.</para>
            </summary>
            <param name="radicand">
                <para>The radicand.</para>
            </param>
            <returns>
                <para>
                    The truncated (upto double precision) value of the positive square root of <paramref name="radicand"/>;
                    that is, (of the return value)
                    <list type="bullet">
                        <item><term>the higher half</term><description>: the integral part of the square root -and-</description></item>
                        <item><term>the lower half</term><description>: the fractional part of the square root.</description></item>
                    </list>
                </para>
            </returns>
        </member>
        <member name="T:UltimateOrb.Runtime.CompilerServices.IU">
            <summary>
            Defines a common interface for discriminated unions.
            </summary>
        </member>
        <member name="P:UltimateOrb.Runtime.CompilerServices.IU.Value">
            <summary>
            Returns the value in a discriminated union.
            </summary>
        </member>
        <member name="P:UltimateOrb.Runtime.CompilerServices.IU.Case">
            <summary>
            Returns the number that presents of which case the value is in a discriminated union.
            </summary>
        </member>
        <member name="P:UltimateOrb.Runtime.CompilerServices.IU.CaseCount">
            <summary>
            Returns the case count of a discriminated union.
            </summary>
        </member>
        <member name="P:UltimateOrb.Threading.AsyncOptions.IsCancellationRequested">
            <inheritdoc cref="P:System.Threading.CancellationToken.IsCancellationRequested"/>
        </member>
        <member name="P:UltimateOrb.Threading.AsyncOptions.CanBeCanceled">
            <inheritdoc cref="P:System.Threading.CancellationToken.CanBeCanceled"/>
        </member>
        <member name="P:UltimateOrb.Threading.AsyncOptions.WaitHandle">
            <inheritdoc cref="P:System.Threading.CancellationToken.WaitHandle"/>
        </member>
        <member name="M:UltimateOrb.Threading.AsyncOptions.Register(System.Action)">
            <inheritdoc cref="M:System.Threading.CancellationToken.Register(System.Action)"/>
        </member>
        <member name="M:UltimateOrb.Threading.AsyncOptions.Register(System.Action,System.Boolean)">
            <inheritdoc cref="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)"/>
        </member>
        <member name="M:UltimateOrb.Threading.AsyncOptions.Register(System.Action{System.Object},System.Object)">
            <inheritdoc cref="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)"/>
        </member>
        <member name="M:UltimateOrb.Threading.AsyncOptions.Register(System.Action{System.Object},System.Object,System.Boolean)">
            <inheritdoc cref="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)"/>
        </member>
        <member name="M:UltimateOrb.Threading.AsyncOptions.Register(System.Action{System.Object,System.Threading.CancellationToken},System.Object)">
            <inheritdoc cref="M:System.Threading.CancellationToken.Register(System.Action{System.Object,System.Threading.CancellationToken},System.Object)"/>
        </member>
        <member name="M:UltimateOrb.Threading.AsyncOptions.ThrowIfCancellationRequested">
            <inheritdoc cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested"/>
        </member>
        <member name="M:UltimateOrb.Threading.AsyncOptions.UnsafeRegister(System.Action{System.Object,System.Threading.CancellationToken},System.Object)">
            <inheritdoc cref="M:System.Threading.CancellationToken.UnsafeRegister(System.Action{System.Object,System.Threading.CancellationToken},System.Object)"/>
        </member>
        <member name="M:UltimateOrb.Threading.AsyncOptions.UnsafeRegister(System.Action{System.Object},System.Object)">
            <inheritdoc cref="M:System.Threading.CancellationToken.UnsafeRegister(System.Action{System.Object},System.Object)"/>
        </member>
        <member name="M:UltimateOrb.UInt128.TryParseCStyleNormalizedU128(System.String,UltimateOrb.UInt128@)">
            <summary>
                <para>Parses an unsigned integer.</para>
            </summary>
            <returns></returns>
            <remarks>
                <para>The Number must be in format <c>[1-9][0-9]*</c>.</para>
            </remarks>
        </member>
        <member name="M:UltimateOrb.UInt256.TryParseCStyleNormalizedU256(System.String,UltimateOrb.UInt256@)">
            <summary>
                <para>Parses an unsigned integer.</para>
            </summary>
            <returns></returns>
            <remarks>
                <para>The Number must be in format <c>[1-9][0-9]*</c>.</para>
            </remarks>
        </member>
        <member name="T:UltimateOrb.UndefinedT">
            <summary>
            Represents the type of the undefined value witch can be used with <see cref="T:UltimateOrb.UndefinableNullable`1"/>.
            </summary>
        </member>
        <member name="F:UltimateOrb.UndefinedT.Undefined">
            <summary>
            The undefined value.
            </summary>
        </member>
        <member name="M:UltimateOrb.UndefinedT.ToString">
            <summary>
            Returns a string that represents the undefined value.
            </summary>
        </member>
        <member name="M:UltimateOrb.Unmanaged.ManagedPtr.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc cref="M:System.IUtf8SpanFormattable.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
        </member>
        <member name="M:UltimateOrb.Unmanaged.ManagedPtr`1.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc cref="M:System.IUtf8SpanFormattable.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
        </member>
        <member name="M:UltimateOrb.Unmanaged.ReadOnlyManagedPtr.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc cref="M:System.IUtf8SpanFormattable.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
        </member>
        <member name="M:UltimateOrb.Unmanaged.ReadOnlyManagedPtr`1.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc cref="M:System.IUtf8SpanFormattable.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
        </member>
        <member name="M:UltimateOrb.Unmanaged.NativeArray`1.Dispose">
            <summary>
            WARNING: Must not invoke Dispose multiple times.
            </summary>
        </member>
        <member name="M:UltimateOrb.Unmanaged.AlignedNativeArray`1.Dispose">
            <summary>
            WARNING: Must not invoke Dispose multiple times.
            </summary>
        </member>
        <member name="M:UltimateOrb.Utilities.BooleanIntegerModule.Equals(System.UInt32,System.UInt32)">
            <summary>
                <para>
                    Returns <c>1</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>0</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.Utilities.BooleanIntegerModule.Equals(System.Int32,System.Int32)">
            <summary>
                <para>
                    Returns <c>1</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>0</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.Utilities.BooleanIntegerModule.Equals(System.UInt64,System.UInt64)">
            <summary>
                <para>
                    Returns <c>1</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>0</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.Utilities.BooleanIntegerModule.Equals(System.Int64,System.Int64)">
            <summary>
                <para>
                    Returns <c>1</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>0</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.Utilities.BooleanIntegerModule.Equals(System.Single,System.Single)">
            <summary>
                <para>
                    Returns <c>1</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>0</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.Utilities.BooleanIntegerModule.Equals(System.Double,System.Double)">
            <summary>
                <para>
                    Returns <c>1</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>0</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.Utilities.BooleanIntegerModule.Equals(System.UIntPtr,System.UIntPtr)">
            <summary>
                <para>
                    Returns <c>1</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>0</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.Utilities.BooleanIntegerModule.Equals(System.IntPtr,System.IntPtr)">
            <summary>
                <para>
                    Returns <c>1</c> if <paramref name="first"/> is equal to <paramref name="second"/>. Otherwise, <c>0</c>.
                </para>
                <para>
                    For floating-point numbers, this function will return 0 if the numbers are unordered (either or both are NaN). The infinite values are equal to themselves.
                </para>
            </summary>
        </member>
        <member name="M:UltimateOrb.Utilities.Extensions.BooleanIntegerExtensions.AsIntegerUnsafe(System.Boolean)">
            <devdoc>
                <para>
                    ECMA-335: (III.1.1.1 Numeric data types - Short integers)
                    <c>bool</c> or <see cref="T:System.Boolean"/> (8-bit) is zero-extended.
                </para>
                <para>
                    The body of this method will be modified by the build tools.
                </para>
            </devdoc>
        </member>
        <member name="M:UltimateOrb.Utilities.Extensions.BooleanIntegerExtensions.AsUIntegerUnsafe(System.Boolean)">
            <devdoc>
                <para>
                    ECMA-335: (III.1.1.1 Numeric data types - Short integers)
                    <c>bool</c> or <see cref="T:System.Boolean"/> (8-bit) is zero-extended.
                </para>
                <para>
                    The body of this method will be modified by the build tools.
                </para>
            </devdoc>
        </member>
        <member name="M:UltimateOrb.Utilities.Extensions.CanonicalIntegerBooleanExtensions.AsIntegerUnsafe(UltimateOrb.CanonicalIntegerBoolean)">
            <devdoc>
                <para>
                    ECMA-335: (III.1.1.1 Numeric data types - Short integers)
                    <c>bool</c> or <see cref="T:System.Boolean"/> (8-bit) is zero-extended.
                </para>
            </devdoc>
        </member>
        <member name="M:UltimateOrb.Utilities.Extensions.CanonicalIntegerBooleanExtensions.AsUIntegerUnsafe(UltimateOrb.CanonicalIntegerBoolean)">
            <devdoc>
                <para>
                    ECMA-335: (III.1.1.1 Numeric data types - Short integers)
                    <c>bool</c> or <see cref="T:System.Boolean"/> (8-bit) is zero-extended.
                </para>
            </devdoc>
        </member>
        <member name="T:UltimateOrb.Utilities.SizeOfModule">
            <summary>
                <para>
                    Provides static methods for getting the managed size of the specified type.
                </para>
            </summary>
            <devdoc>
                <para>
                    This type contains members will be modified by the build tools.
                    The build tools identify the type and those members by their names.
                    Whenever you rename this type or such a member, update the build tools accordingly.
                </para>
            </devdoc>
        </member>
        <member name="F:UltimateOrb.Utilities.SizeOfModule.BitsPerByte">
            <summary>
                <para>Represents the number of bits in a byte.</para>
            </summary>
        </member>
        <member name="M:UltimateOrb.Utilities.SizeOfModule.BitSizeOf``1">
            <summary>
                <para>
                    Returns the bit size of the specified type.
                </para>
            </summary>
            <typeparam name="T">
                <para>
                    Specifies the type.
                </para>
            </typeparam>
            <returns>
                <para>
                    The managed size, in bits, of a type.
                </para>
            </returns>
            <remarks>
                <para>
                    For a reference type, the size returned is the size of the object reference itself (same as <c>sizeof(IntPtr)</c>), not the actural size of the data stored in the object.
                </para>
            </remarks>
            <devdoc>
                <para>
                    ECMA-335: Note that the runtime size of a value type shall not exceed 1 MiB (0x100000 bytes).
                </para>
            </devdoc>
        </member>
        <member name="M:UltimateOrb.Utilities.SizeOfModule.SizeOf``1">
            <summary>
                <para>
                    Returns the result of the CIL <c>sizeof</c> instruction of the specified type.
                </para>
            </summary>
            <typeparam name="T">
                <para>
                    Specifies the type parameter of the instruction.
                </para>
            </typeparam>
            <returns>
                <para>
                    The managed size, in bytes, of a type.
                </para>
            </returns>
            <remarks>
                <para>
                    For a reference type, the size returned is the size of the object reference itself (same as <c>sizeof(IntPtr)</c>), not the actural size of the data stored in the object.
                </para>
            </remarks>
            <devdoc>
                <para>
                    ECMA-335: Note that the runtime size of a value type shall not exceed 1 MiB (0x100000 bytes).
                </para>
                <para>
                    The body of this method will be modified by the build tools.
                    The build tools identify the method by its names.
                    Whenever you rename this method, update the build tools accordingly.
                </para>
            </devdoc>
        </member>
        <member name="T:UltimateOrb.U">
            <summary>
            Provides static methods to support discriminated unions. 
            </summary>
        </member>
        <member name="T:UltimateOrb.U`2">
            <summary>
            Defines a value-type discriminated union with two cases.
            </summary>
        </member>
        <member name="F:UltimateOrb.U`2.Case">
            <summary>
            Determines of which case the value is in a discriminated union.
            </summary>
        </member>
        <member name="F:UltimateOrb.U`2.Case1OrDefault">
            <summary>
            Value when <see cref="F:UltimateOrb.U`2.Case"/> is 1 or default.
            </summary>
        </member>
        <member name="F:UltimateOrb.U`2.Case2OrDefault">
            <summary>
            Value when <see cref="F:UltimateOrb.U`2.Case"/> is 2 or default.
            </summary>
        </member>
        <member name="M:UltimateOrb.U`2.#ctor(`0)">
            <summary>
            Constructs a discriminated union from the value of case 1. 
            </summary>
        </member>
        <member name="M:UltimateOrb.U`2.#ctor(`1)">
            <summary>
            Constructs a discriminated union from the value of case 2. 
            </summary>
        </member>
        <member name="M:UltimateOrb.U`2.Create``1(``0,System.Int32)">
            <summary>
            Constructs a discriminated union from the value. 
            </summary>
        </member>
        <member name="P:UltimateOrb.U`2.Case1">
            <summary>
            Value of case 1.
            </summary>
        </member>
        <member name="P:UltimateOrb.U`2.Case2">
            <summary>
            Value of case 2.
            </summary>
        </member>
        <member name="M:UltimateOrb.U`2.GetValue``1">
            <summary>
            Value of case 2.
            </summary>
        </member>
        <member name="M:UltimateOrb.U`2.CompareTo(UltimateOrb.U{`0,`1})">
            <summary>
            Compares discriminated unions. Two discriminated unions are not equal if their case numbers are different.
            </summary>
        </member>
        <member name="M:UltimateOrb.U`2.Equals(UltimateOrb.U{`0,`1})">
            <summary>
            Compares discriminated unions. Two discriminated unions are not equal if their case numbers are different.
            </summary>
        </member>
        <member name="M:UltimateOrb.U`2.op_Explicit(UltimateOrb.U{`0,`1})~`0">
            <summary>
            Extracts the value in a discriminated union.
            </summary>
        </member>
        <member name="M:UltimateOrb.U`2.op_Explicit(UltimateOrb.U{`0,`1})~`1">
            <summary>
            Extracts the value in a discriminated union.
            </summary>
        </member>
        <member name="M:UltimateOrb.U`2.op_Implicit(`0)~UltimateOrb.U{`0,`1}">
            <summary>
            Warps a value into a discriminated union.
            </summary>
        </member>
        <member name="M:UltimateOrb.U`2.op_Implicit(`1)~UltimateOrb.U{`0,`1}">
            <summary>
            Warps a value into a discriminated union.
            </summary>
        </member>
        <member name="M:UltimateOrb.U`2.Equals(System.Object)">
            <summary>
            Compares discriminated unions.<br />
            Two discriminated unions are not equal if their case tags are different.<br />
            </summary>
        </member>
        <member name="M:UltimateOrb.U`2.GetHashCode">
            <summary>
            Calculates the hash code for the current <see cref="T:UltimateOrb.U`2"/> instance.
            </summary>
            <returns>The hash code for the current <see cref="T:UltimateOrb.U`2"/> instance.</returns>
        </member>
        <member name="M:UltimateOrb.U`2.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:UltimateOrb.U`2"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:UltimateOrb.U`2"/> instance.</returns>
        </member>
        <member name="M:UltimateOrb.U`2.op_Equality(UltimateOrb.U{`0,`1},UltimateOrb.U{`0,`1})">
            <summary>
            Compares discriminated unions.<br />
            Two discriminated unions are not equal if their case tags are different.<br />
            </summary>
        </member>
        <member name="M:UltimateOrb.U`2.op_Inequality(UltimateOrb.U{`0,`1},UltimateOrb.U{`0,`1})">
            <summary>
            Compares discriminated unions.<br />
            Two discriminated unions are not equal if their case tags are different.<br />
            </summary>
        </member>
        <member name="T:UltimateOrb.Void">
            <summary>
                <para>
                    Provides a placeholder type.
                </para>
            </summary>
        </member>
        <member name="T:UltimateOrb.Void`1">
            <summary>
                <para>
                    Provides a type that is different from the specified type.
                </para>
            </summary>
            <typeparam name="T">
                <para>
                    The specified type.
                </para>
            </typeparam>
        </member>
        <member name="T:UltimateOrb.Void`2">
            <summary>
                <para>
                    Provides a type that is different from the specified types.
                </para>
            </summary>
            <typeparam name="T1">
                <para>
                    The first specified type.
                </para>
            </typeparam>
            <typeparam name="T2">
                <para>
                    The second specified type.
                </para>
            </typeparam>
        </member>
        <member name="T:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute">
            <summary>
            Allows the current assembly to access the internal types of a specified assembly that are ordinarily invisible.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute" /> class with the name of the specified assembly.
            </summary>
            <param name="assemblyName">The name of the specified assembly.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute.AssemblyName">
            <summary>
            Gets the name of the specified assembly whose access checks against the current assembly are ignored .
            </summary>
            <value>A string that represents the name of the specified assembly.</value>
        </member>
    </members>
</doc>
