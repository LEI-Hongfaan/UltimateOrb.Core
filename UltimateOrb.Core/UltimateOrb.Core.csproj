<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net8.0;net9.0</TargetFrameworks>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <LangVersion>preview</LangVersion>
    <!--<EnablePreviewFeatures>true</EnablePreviewFeatures>-->
    <FileVersion>1.3.0.0</FileVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <Version>3.2.7-beta.1</Version>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <Authors>LEI Hongfaan</Authors>
    <Product>UltimateOrb Libraries</Product>
    <RootNamespace>UltimateOrb</RootNamespace>
    <Description>UltimateOrb Core Libraries.</Description>
    <Copyright>Copyright © 2017, 2018, 2020, 2022, 2024 LEI Hongfaan. Distributed under the MIT License.</Copyright>
    <PackageProjectUrl>https://github.com/LEI-Hongfaan/UltimateOrb.Core</PackageProjectUrl>
    <RepositoryUrl>https://github.com/LEI-Hongfaan/UltimateOrb.Core</RepositoryUrl>
    <PackageTags>UltimateOrb;Core;BCL;Int128;UInt128;Rational;Rational64;Monad;Linq;WeakDictionary</PackageTags>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageRequireLicenseAcceptance>True</PackageRequireLicenseAcceptance>
    <Title>UltimateOrb Libraries</Title>
    <PackageReadmeFile>README.md</PackageReadmeFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>TRACE;FEATURE_STANDARD_LIBRARY_INTEROPERABILITY_FORMATTING_AND_CONVERSION</DefineConstants>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
    <DocumentationFile>UltimateOrb.Core.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DefineConstants>TRACE;FEATURE_STANDARD_LIBRARY_INTEROPERABILITY_FORMATTING_AND_CONVERSION</DefineConstants>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <CheckForOverflowUnderflow>true</CheckForOverflowUnderflow>
    <DocumentationFile>UltimateOrb.Core.xml</DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Debug|net8.0|AnyCPU'">
    <DefineConstants>$(DefineConstants);USE_UNSAFE_ACCESS_TO_STD_BIGINTEGER</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net8.0|AnyCPU'">
    <DefineConstants>$(DefineConstants);USE_UNSAFE_ACCESS_TO_STD_BIGINTEGER</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="Numerics\Complex.cs" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\.editorconfig" Link=".editorconfig" />
    <None Include="..\LICENSE">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
    <None Include="..\README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
    <None Include="Numerics\Complex.cs" />
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349b6-6b84-4df5-91f0-309beebad82d}" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Boolean{Core}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Boolean{Core}.tt</DependentUpon>
    </Compile>
    <Compile Update="CanonicalIntegerBooleanModule{Compare}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>CanonicalIntegerBooleanModule{Compare}.tt</DependentUpon>
    </Compile>
    <Compile Update="DelegateTypes{IAction,IFunc}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DelegateTypes{IAction,IFunc}.tt</DependentUpon>
    </Compile>
    <Compile Update="Functional\CommonDelegates\CommonDelegates.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>CommonDelegates.tt</DependentUpon>
    </Compile>
    <Compile Update="FunctionPointers.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>FunctionPointers.tt</DependentUpon>
    </Compile>
    <Compile Update="IInitializable.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>IInitializable.tt</DependentUpon>
    </Compile>
    <Compile Update="Numerics\DoubleArithmetic{BigMul,BigDivRem,BigDiv,BigRem}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DoubleArithmetic{BigMul,BigDivRem,BigDiv,BigRem}.tt</DependentUpon>
    </Compile>
    <Compile Update="Numerics\DoubleArithmetic{Compare}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DoubleArithmetic{Compare}.tt</DependentUpon>
    </Compile>
    <Compile Update="Numerics\DoubleArithmetic{Core}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DoubleArithmetic{Core}.tt</DependentUpon>
    </Compile>
    <Compile Update="Numerics\DoubleArithmetic{DivRem}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DoubleArithmetic{DivRem}.tt</DependentUpon>
    </Compile>
    <Compile Update="Numerics\DoubleArithmetic{Increase,Decrease}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DoubleArithmetic{Increase,Decrease}.tt</DependentUpon>
    </Compile>
    <Compile Update="Numerics\DoubleArithmetic{Shift}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>DoubleArithmetic{Shift}.tt</DependentUpon>
    </Compile>
    <Compile Update="Numerics\IBinaryIntegerOperationProvider{Core}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>IBinaryIntegerOperationProvider{Core}.tt</DependentUpon>
    </Compile>
    <Compile Update="StandardFuncWrapperCatch{Core}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>StandardFuncWrapperCatch{Core}.tt</DependentUpon>
    </Compile>
    <Compile Update="StandardFuncWrapper{Core}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>StandardFuncWrapper{Core}.tt</DependentUpon>
    </Compile>
    <Compile Update="Utilities\BooleanIntegerModule{Compare}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>BooleanIntegerModule{Compare}.tt</DependentUpon>
    </Compile>
    <Compile Update="Utilities\CilVerifiable{Unchecked,Bitwise}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>CilVerifiable{Unchecked,Bitwise}.tt</DependentUpon>
    </Compile>
    <Compile Update="Utilities\Finalization{Generated}.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Finalization{Generated}.tt</DependentUpon>
    </Compile>
    <Compile Update="Utilities\SignConverter.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>SignConverter.tt</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <None Update="Boolean{Core}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>Boolean{Core}.cs</LastGenOutput>
    </None>
    <None Update="DelegateTypes{IAction,IFunc}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DelegateTypes{IAction,IFunc}.cs</LastGenOutput>
    </None>
    <None Update="Functional\CommonDelegates\CommonDelegates.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>CommonDelegates.cs</LastGenOutput>
    </None>
    <None Update="FunctionPointers.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>FunctionPointers.cs</LastGenOutput>
    </None>
    <None Update="IInitializable.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>IInitializable.cs</LastGenOutput>
    </None>
    <None Update="Numerics\DoubleArithmetic{BigMul,BigDivRem,BigDiv,BigRem}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DoubleArithmetic{BigMul,BigDivRem,BigDiv,BigRem}.cs</LastGenOutput>
    </None>
    <None Update="Numerics\DoubleArithmetic{Compare}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DoubleArithmetic{Compare}.cs</LastGenOutput>
    </None>
    <None Update="Numerics\DoubleArithmetic{Core}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DoubleArithmetic{Core}.cs</LastGenOutput>
    </None>
    <None Update="Numerics\DoubleArithmetic{DivRem}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DoubleArithmetic{DivRem}.cs</LastGenOutput>
    </None>
    <None Update="Numerics\DoubleArithmetic{Increase,Decrease}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DoubleArithmetic{Increase,Decrease}.cs</LastGenOutput>
    </None>
    <None Update="Numerics\DoubleArithmetic{Shift}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>DoubleArithmetic{Shift}.cs</LastGenOutput>
    </None>
    <None Update="Numerics\IBinaryIntegerOperationProvider{Core}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>IBinaryIntegerOperationProvider{Core}.cs</LastGenOutput>
    </None>
    <None Update="StandardFuncWrapperCatch{Core}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>StandardFuncWrapperCatch{Core}.cs</LastGenOutput>
    </None>
    <None Update="StandardFuncWrapper{Core}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>StandardFuncWrapper{Core}.cs</LastGenOutput>
    </None>
    <None Update="CanonicalIntegerBooleanModule{Compare}.tt">
      <LastGenOutput>CanonicalIntegerBooleanModule{Compare}.cs</LastGenOutput>
      <Generator>TextTemplatingFileGenerator</Generator>
    </None>
    <None Update="Utilities\BooleanIntegerModule{Compare}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>BooleanIntegerModule{Compare}.cs</LastGenOutput>
    </None>
    <None Update="Utilities\CilVerifiable{Unchecked,Bitwise}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>CilVerifiable{Unchecked,Bitwise}.cs</LastGenOutput>
    </None>
    <None Update="Utilities\Finalization{Generated}.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>Finalization{Generated}.cs</LastGenOutput>
    </None>
    <None Update="Utilities\SignConverter.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>SignConverter.cs</LastGenOutput>
    </None>
  </ItemGroup>

  <ItemGroup>
    <TrimmerRootDescriptor Include="linker.xml" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Numerics\Specialized\" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Fody" Version="6.8.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="InlineIL.Fody" Version="1.9.0-pre2" PrivateAssets="all" />
  </ItemGroup>

  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec WorkingDirectory="$(SolutionDir)UltimateOrb.Core.BuildTools\BuildTools" Command="echo 'Invoking build tools to modify the output assembly (&quot;$(TargetPath)&quot;)...' &amp;&amp; UltimateOrb.Core.BuildTools $(TargetPath) &amp;&amp; echo 'To sign the assembly, rebuild with &quot;Sign the assembly&quot;, then use the command:' &amp;&amp; echo '    sn -Ra &quot;$(TargetPath)&quot; &quot;$(ProjectDir)test.snk&quot;' &amp;&amp; echo 'To verify the assembly, use the command:' &amp;&amp; echo '    peverify &quot;$(TargetPath)&quot;' &amp;&amp; echo 'If PEVerify can not resolve the dependent assemblies ([HRESULT 0x80070002]), edit &quot;*.dll.config&quot; files and copy them to the same directory as the output assembly.'" />
  </Target>

</Project>
